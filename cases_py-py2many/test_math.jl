# Transpiled with flags: 
# - oop
using ObjectOriented
using Random
using ResumableFunctions
using Test
using Xsum


using decimal: Decimal
using fractions: Fraction
using doctest: DocFileSuite




import decimal


import platform



eps_ = 1e-05
NAN = parse(Float64, "nan")
INF = parse(Float64, "inf")
NINF = parse(Float64, "-inf")
FLOAT_MAX = sys.float_info.max
FLOAT_MIN = sys.float_info.min
(x, y) = (1e+16, 2.9999)
HAVE_DOUBLE_ROUNDING = (x + y) == (1e+16 + 4)
if abspath(PROGRAM_FILE) == @__FILE__
file = ARGS[0]
test_numbers = TestNumbers()
test_int(test_numbers)
test_float(test_numbers)
test_complex(test_numbers)
aug_assign_test = AugAssignTest()
testBasic(aug_assign_test)
testInList(aug_assign_test)
testInDict(aug_assign_test)
testSequences(aug_assign_test)
testCustomMethods1(aug_assign_test)
testCustomMethods2(aug_assign_test)
legacy_base64_test_case = LegacyBase64TestCase()
test_encodebytes(legacy_base64_test_case)
test_decodebytes(legacy_base64_test_case)
test_encode(legacy_base64_test_case)
test_decode(legacy_base64_test_case)
base_x_y_test_case = BaseXYTestCase()
test_b64encode(base_x_y_test_case)
test_b64decode(base_x_y_test_case)
test_b64decode_padding_error(base_x_y_test_case)
test_b64decode_invalid_chars(base_x_y_test_case)
test_b32encode(base_x_y_test_case)
test_b32decode(base_x_y_test_case)
test_b32decode_casefold(base_x_y_test_case)
test_b32decode_error(base_x_y_test_case)
test_b32hexencode(base_x_y_test_case)
test_b32hexencode_other_types(base_x_y_test_case)
test_b32hexdecode(base_x_y_test_case)
test_b32hexdecode_other_types(base_x_y_test_case)
test_b32hexdecode_error(base_x_y_test_case)
test_b16encode(base_x_y_test_case)
test_b16decode(base_x_y_test_case)
test_a85encode(base_x_y_test_case)
test_b85encode(base_x_y_test_case)
test_a85decode(base_x_y_test_case)
test_b85decode(base_x_y_test_case)
test_a85_padding(base_x_y_test_case)
test_b85_padding(base_x_y_test_case)
test_a85decode_errors(base_x_y_test_case)
test_b85decode_errors(base_x_y_test_case)
test_decode_nonascii_str(base_x_y_test_case)
test_ErrorHeritage(base_x_y_test_case)
test_RFC4648_test_cases(base_x_y_test_case)
test_main = TestMain()
test_encode_decode(test_main)
test_encode_file(test_main)
test_encode_from_stdin(test_main)
test_decode(test_main)
tearDown(test_main)
rat_test_case = RatTestCase()
test_gcd(rat_test_case)
test_constructor(rat_test_case)
test_add(rat_test_case)
test_sub(rat_test_case)
test_mul(rat_test_case)
test_div(rat_test_case)
test_floordiv(rat_test_case)
test_eq(rat_test_case)
test_true_div(rat_test_case)
operation_order_tests = OperationOrderTests()
test_comparison_orders(operation_order_tests)
fallback_blocking_tests = FallbackBlockingTests()
test_fallback_rmethod_blocking(fallback_blocking_tests)
test_fallback_ne_blocking(fallback_blocking_tests)
bool_test = BoolTest()
test_repr(bool_test)
test_str(bool_test)
test_int(bool_test)
test_float(bool_test)
test_math(bool_test)
test_convert(bool_test)
test_keyword_args(bool_test)
test_format(bool_test)
test_hasattr(bool_test)
test_callable(bool_test)
test_isinstance(bool_test)
test_issubclass(bool_test)
test_contains(bool_test)
test_string(bool_test)
test_boolean(bool_test)
test_fileclosed(bool_test)
test_types(bool_test)
test_operator(bool_test)
test_marshal(bool_test)
test_pickle(bool_test)
test_picklevalues(bool_test)
test_convert_to_bool(bool_test)
test_from_bytes(bool_test)
test_sane_len(bool_test)
test_blocked(bool_test)
test_real_and_imag(bool_test)
test_bool_called_at_least_once(bool_test)
builtin_test = BuiltinTest()
test_import(builtin_test)
test_abs(builtin_test)
test_all(builtin_test)
test_any(builtin_test)
test_ascii(builtin_test)
test_neg(builtin_test)
test_callable(builtin_test)
test_chr(builtin_test)
test_cmp(builtin_test)
test_compile(builtin_test)
test_compile_top_level_await_no_coro(builtin_test)
test_compile_top_level_await(builtin_test)
test_compile_top_level_await_invalid_cases(builtin_test)
test_compile_async_generator(builtin_test)
test_delattr(builtin_test)
test_dir(builtin_test)
test_divmod(builtin_test)
test_eval(builtin_test)
test_general_eval(builtin_test)
test_exec(builtin_test)
test_exec_globals(builtin_test)
test_exec_redirected(builtin_test)
test_filter(builtin_test)
test_filter_pickle(builtin_test)
test_getattr(builtin_test)
test_hasattr(builtin_test)
test_hash(builtin_test)
test_hex(builtin_test)
test_id(builtin_test)
test_iter(builtin_test)
test_isinstance(builtin_test)
test_issubclass(builtin_test)
test_len(builtin_test)
test_map(builtin_test)
test_map_pickle(builtin_test)
test_max(builtin_test)
test_min(builtin_test)
test_next(builtin_test)
test_oct(builtin_test)
test_open(builtin_test)
test_open_default_encoding(builtin_test)
test_open_non_inheritable(builtin_test)
test_ord(builtin_test)
test_pow(builtin_test)
test_input(builtin_test)
test_repr(builtin_test)
test_round(builtin_test)
test_round_large(builtin_test)
test_bug_27936(builtin_test)
test_setattr(builtin_test)
test_sum(builtin_test)
test_type(builtin_test)
test_vars(builtin_test)
test_zip(builtin_test)
test_zip_pickle(builtin_test)
test_zip_pickle_strict(builtin_test)
test_zip_pickle_strict_fail(builtin_test)
test_zip_bad_iterable(builtin_test)
test_zip_strict(builtin_test)
test_zip_strict_iterators(builtin_test)
test_zip_strict_error_handling(builtin_test)
test_zip_strict_error_handling_stopiteration(builtin_test)
test_zip_result_gc(builtin_test)
test_format(builtin_test)
test_bin(builtin_test)
test_bytearray_translate(builtin_test)
test_bytearray_extend_error(builtin_test)
test_construct_singletons(builtin_test)
test_warning_notimplemented(builtin_test)
test_breakpoint = TestBreakpoint()
setUp(test_breakpoint)
test_breakpoint(test_breakpoint)
test_breakpoint_with_breakpointhook_set(test_breakpoint)
test_breakpoint_with_breakpointhook_reset(test_breakpoint)
test_breakpoint_with_args_and_keywords(test_breakpoint)
test_breakpoint_with_passthru_error(test_breakpoint)
test_envar_good_path_builtin(test_breakpoint)
test_envar_good_path_other(test_breakpoint)
test_envar_good_path_noop_0(test_breakpoint)
test_envar_good_path_empty_string(test_breakpoint)
test_envar_unimportable(test_breakpoint)
test_envar_ignored_when_hook_is_set(test_breakpoint)
pty_tests = PtyTests()
test_input_tty(pty_tests)
test_input_tty_non_ascii(pty_tests)
test_input_tty_non_ascii_unicode_errors(pty_tests)
test_input_no_stdout_fileno(pty_tests)
test_sorted = TestSorted()
test_basic(test_sorted)
test_bad_arguments(test_sorted)
test_inputtypes(test_sorted)
test_baddecorator(test_sorted)
shutdown_test = ShutdownTest()
test_cleanup(shutdown_test)
test_type = TestType()
test_new_type(test_type)
test_type_nokwargs(test_type)
test_type_name(test_type)
test_type_qualname(test_type)
test_type_doc(test_type)
test_bad_args(test_type)
test_bad_slots(test_type)
test_namespace_order(test_type)
bytes_test = BytesTest()
test_getitem_error(bytes_test)
test_buffer_is_readonly(bytes_test)
test_bytes_blocking(bytes_test)
test_repeat_id_preserving(bytes_test)
byte_array_test = ByteArrayTest()
test_getitem_error(byte_array_test)
test_setitem_error(byte_array_test)
test_nohash(byte_array_test)
test_bytearray_api(byte_array_test)
test_reverse(byte_array_test)
test_clear(byte_array_test)
test_copy(byte_array_test)
test_regexps(byte_array_test)
test_setitem(byte_array_test)
test_delitem(byte_array_test)
test_setslice(byte_array_test)
test_setslice_extend(byte_array_test)
test_fifo_overrun(byte_array_test)
test_del_expand(byte_array_test)
test_extended_set_del_slice(byte_array_test)
test_setslice_trap(byte_array_test)
test_iconcat(byte_array_test)
test_irepeat(byte_array_test)
test_irepeat_1char(byte_array_test)
test_alloc(byte_array_test)
test_init_alloc(byte_array_test)
test_extend(byte_array_test)
test_remove(byte_array_test)
test_pop(byte_array_test)
test_nosort(byte_array_test)
test_append(byte_array_test)
test_insert(byte_array_test)
test_copied(byte_array_test)
test_partition_bytearray_doesnt_share_nullstring(byte_array_test)
test_resize_forbidden(byte_array_test)
test_obsolete_write_lock(byte_array_test)
test_iterator_pickling2(byte_array_test)
test_iterator_length_hint(byte_array_test)
test_repeat_after_setslice(byte_array_test)
assorted_bytes_test = AssortedBytesTest()
test_repr_str(assorted_bytes_test)
test_format(assorted_bytes_test)
test_compare_bytes_to_bytearray(assorted_bytes_test)
test_doc(assorted_bytes_test)
test_from_bytearray(assorted_bytes_test)
test_to_str(assorted_bytes_test)
test_literal(assorted_bytes_test)
test_split_bytearray(assorted_bytes_test)
test_rsplit_bytearray(assorted_bytes_test)
test_return_self(assorted_bytes_test)
test_compare(assorted_bytes_test)
bytearray_p_e_p3137_test = BytearrayPEP3137Test()
test_returns_new_copy(bytearray_p_e_p3137_test)
byte_array_as_string_test = ByteArrayAsStringTest()
bytes_as_string_test = BytesAsStringTest()
byte_array_subclass_test = ByteArraySubclassTest()
test_init_override(byte_array_subclass_test)
bytes_subclass_test = BytesSubclassTest()
test_user_objects = TestUserObjects()
test_str_protocol(test_user_objects)
test_list_protocol(test_user_objects)
test_dict_protocol(test_user_objects)
test_list_copy(test_user_objects)
test_dict_copy(test_user_objects)
test_chain_map = TestChainMap()
test_basics(test_chain_map)
test_ordering(test_chain_map)
test_constructor(test_chain_map)
test_bool(test_chain_map)
test_missing(test_chain_map)
test_order_preservation(test_chain_map)
test_iter_not_calling_getitem_on_maps(test_chain_map)
test_dict_coercion(test_chain_map)
test_new_child(test_chain_map)
test_union_operators(test_chain_map)
test_named_tuple = TestNamedTuple()
test_factory(test_named_tuple)
test_defaults(test_named_tuple)
test_readonly(test_named_tuple)
test_factory_doc_attr(test_named_tuple)
test_field_doc(test_named_tuple)
test_field_doc_reuse(test_named_tuple)
test_field_repr(test_named_tuple)
test_name_fixer(test_named_tuple)
test_module_parameter(test_named_tuple)
test_instance(test_named_tuple)
test_tupleness(test_named_tuple)
test_odd_sizes(test_named_tuple)
test_pickle(test_named_tuple)
test_copy(test_named_tuple)
test_name_conflicts(test_named_tuple)
test_repr(test_named_tuple)
test_keyword_only_arguments(test_named_tuple)
test_namedtuple_subclass_issue_24931(test_named_tuple)
test_field_descriptor(test_named_tuple)
test_new_builtins_issue_43102(test_named_tuple)
test_match_args(test_named_tuple)
a_b_c_test_case = ABCTestCase()
test_counter = TestCounter()
test_basics(test_counter)
test_init(test_counter)
test_total(test_counter)
test_order_preservation(test_counter)
test_update(test_counter)
test_copying(test_counter)
test_copy_subclass(test_counter)
test_conversions(test_counter)
test_invariant_for_the_in_operator(test_counter)
test_multiset_operations(test_counter)
test_inplace_operations(test_counter)
test_subtract(test_counter)
test_unary(test_counter)
test_repr_nonsortable(test_counter)
test_helper_function(test_counter)
test_multiset_operations_equivalent_to_set_operations(test_counter)
test_eq(test_counter)
test_le(test_counter)
test_lt(test_counter)
test_ge(test_counter)
test_gt(test_counter)
comparison_test = ComparisonTest()
test_comparisons(comparison_test)
test_id_comparisons(comparison_test)
test_ne_defaults_to_not_eq(comparison_test)
test_ne_high_priority(comparison_test)
test_ne_low_priority(comparison_test)
test_other_delegation(comparison_test)
test_issue_1393(comparison_test)
complex_test = ComplexTest()
test_truediv(complex_test)
test_truediv_zero_division(complex_test)
test_floordiv(complex_test)
test_floordiv_zero_division(complex_test)
test_richcompare(complex_test)
test_richcompare_boundaries(complex_test)
test_mod(complex_test)
test_mod_zero_division(complex_test)
test_divmod(complex_test)
test_divmod_zero_division(complex_test)
test_pow(complex_test)
test_pow_with_small_integer_exponents(complex_test)
test_boolcontext(complex_test)
test_conjugate(complex_test)
test_constructor(complex_test)
test_constructor_special_numbers(complex_test)
test_underscores(complex_test)
test_hash(complex_test)
test_abs(complex_test)
test_repr_str(complex_test)
test_negative_zero_repr_str(complex_test)
test_neg(complex_test)
test_getnewargs(complex_test)
test_plus_minus_0j(complex_test)
test_negated_imaginary_literal(complex_test)
test_overflow(complex_test)
test_repr_roundtrip(complex_test)
test_format(complex_test)
test_contains = TestContains()
test_common_tests(test_contains)
test_builtin_sequence_types(test_contains)
test_nonreflexive(test_contains)
test_block_fallback(test_contains)
test_abstract_context_manager = TestAbstractContextManager()
test_enter(test_abstract_context_manager)
test_exit_is_abstract(test_abstract_context_manager)
test_structural_subclassing(test_abstract_context_manager)
context_manager_test_case = ContextManagerTestCase()
test_contextmanager_plain(context_manager_test_case)
test_contextmanager_finally(context_manager_test_case)
test_contextmanager_no_reraise(context_manager_test_case)
test_contextmanager_trap_yield_after_throw(context_manager_test_case)
test_contextmanager_except(context_manager_test_case)
test_contextmanager_except_stopiter(context_manager_test_case)
test_contextmanager_except_pep479(context_manager_test_case)
test_contextmanager_do_not_unchain_non_stopiteration_exceptions(context_manager_test_case)
test_contextmanager_attribs(context_manager_test_case)
test_contextmanager_doc_attrib(context_manager_test_case)
test_instance_docstring_given_cm_docstring(context_manager_test_case)
test_keywords(context_manager_test_case)
test_nokeepref(context_manager_test_case)
test_param_errors(context_manager_test_case)
test_recursive(context_manager_test_case)
closing_test_case = ClosingTestCase()
test_instance_docs(closing_test_case)
test_closing(closing_test_case)
test_closing_error(closing_test_case)
nullcontext_test_case = NullcontextTestCase()
test_nullcontext(nullcontext_test_case)
file_context_test_case = FileContextTestCase()
testWithOpen(file_context_test_case)
lock_context_test_case = LockContextTestCase()
testWithLock(lock_context_test_case)
testWithRLock(lock_context_test_case)
testWithCondition(lock_context_test_case)
testWithSemaphore(lock_context_test_case)
testWithBoundedSemaphore(lock_context_test_case)
test_context_decorator = TestContextDecorator()
test_instance_docs(test_context_decorator)
test_contextdecorator(test_context_decorator)
test_contextdecorator_with_exception(test_context_decorator)
test_decorator(test_context_decorator)
test_decorator_with_exception(test_context_decorator)
test_decorating_method(test_context_decorator)
test_typo_enter(test_context_decorator)
test_typo_exit(test_context_decorator)
test_contextdecorator_as_mixin(test_context_decorator)
test_contextmanager_as_decorator(test_context_decorator)
test_exit_stack = TestExitStack()
test_redirect_stdout = TestRedirectStdout()
test_redirect_stderr = TestRedirectStderr()
test_suppress = TestSuppress()
test_instance_docs(test_suppress)
test_no_result_from_enter(test_suppress)
test_no_exception(test_suppress)
test_exact_exception(test_suppress)
test_exception_hierarchy(test_suppress)
test_other_exception(test_suppress)
test_no_args(test_suppress)
test_multiple_exception_args(test_suppress)
test_cm_is_reentrant(test_suppress)
test_abstract_async_context_manager = TestAbstractAsyncContextManager()
test_exit_is_abstract(test_abstract_async_context_manager)
test_structural_subclassing(test_abstract_async_context_manager)
async_context_manager_test_case = AsyncContextManagerTestCase()
test_contextmanager_attribs(async_context_manager_test_case)
test_contextmanager_doc_attrib(async_context_manager_test_case)
aclosing_test_case = AclosingTestCase()
test_instance_docs(aclosing_test_case)
test_async_exit_stack = TestAsyncExitStack()
setUp(test_async_exit_stack)
test_async_nullcontext = TestAsyncNullcontext()
test_case = TestCase()
test_no_fields(test_case)
test_no_fields_but_member_variable(test_case)
test_one_field_no_default(test_case)
test_field_default_default_factory_error(test_case)
test_field_repr(test_case)
test_named_init_params(test_case)
test_two_fields_one_default(test_case)
test_overwrite_hash(test_case)
test_overwrite_fields_in_derived_class(test_case)
test_field_named_self(test_case)
test_field_named_object(test_case)
test_field_named_object_frozen(test_case)
test_field_named_like_builtin(test_case)
test_field_named_like_builtin_frozen(test_case)
test_0_field_compare(test_case)
test_1_field_compare(test_case)
test_simple_compare(test_case)
test_compare_subclasses(test_case)
test_eq_order(test_case)
test_field_no_default(test_case)
test_field_default(test_case)
test_not_in_repr(test_case)
test_not_in_compare(test_case)
test_hash_field_rules(test_case)
test_init_false_no_default(test_case)
test_class_marker(test_case)
test_field_order(test_case)
test_class_attrs(test_case)
test_disallowed_mutable_defaults(test_case)
test_deliberately_mutable_defaults(test_case)
test_no_options(test_case)
test_not_tuple(test_case)
test_not_other_dataclass(test_case)
test_function_annotations(test_case)
test_missing_default(test_case)
test_missing_default_factory(test_case)
test_missing_repr(test_case)
test_dont_include_other_annotations(test_case)
test_post_init(test_case)
test_post_init_super(test_case)
test_post_init_staticmethod(test_case)
test_post_init_classmethod(test_case)
test_class_var(test_case)
test_class_var_no_default(test_case)
test_class_var_default_factory(test_case)
test_class_var_with_default(test_case)
test_class_var_frozen(test_case)
test_init_var_no_default(test_case)
test_init_var_default_factory(test_case)
test_init_var_with_default(test_case)
test_init_var(test_case)
test_init_var_preserve_type(test_case)
test_init_var_inheritance(test_case)
test_default_factory(test_case)
test_default_factory_with_no_init(test_case)
test_default_factory_not_called_if_value_given(test_case)
test_default_factory_derived(test_case)
test_intermediate_non_dataclass(test_case)
test_classvar_default_factory(test_case)
test_is_dataclass(test_case)
test_is_dataclass_when_getattr_always_returns(test_case)
test_is_dataclass_genericalias(test_case)
test_helper_fields_with_class_instance(test_case)
test_helper_fields_exception(test_case)
test_helper_asdict(test_case)
test_helper_asdict_raises_on_classes(test_case)
test_helper_asdict_copy_values(test_case)
test_helper_asdict_nested(test_case)
test_helper_asdict_builtin_containers(test_case)
test_helper_asdict_builtin_object_containers(test_case)
test_helper_asdict_factory(test_case)
test_helper_asdict_namedtuple(test_case)
test_helper_asdict_namedtuple_key(test_case)
test_helper_asdict_namedtuple_derived(test_case)
test_helper_astuple(test_case)
test_helper_astuple_raises_on_classes(test_case)
test_helper_astuple_copy_values(test_case)
test_helper_astuple_nested(test_case)
test_helper_astuple_builtin_containers(test_case)
test_helper_astuple_builtin_object_containers(test_case)
test_helper_astuple_factory(test_case)
test_helper_astuple_namedtuple(test_case)
test_dynamic_class_creation(test_case)
test_dynamic_class_creation_using_field(test_case)
test_init_in_order(test_case)
test_items_in_dicts(test_case)
test_alternate_classmethod_constructor(test_case)
test_field_metadata_default(test_case)
test_field_metadata_mapping(test_case)
test_field_metadata_custom_mapping(test_case)
test_generic_dataclasses(test_case)
test_generic_extending(test_case)
test_generic_dynamic(test_case)
test_dataclasses_pickleable(test_case)
test_dataclasses_qualnames(test_case)
test_field_no_annotation = TestFieldNoAnnotation()
test_field_without_annotation(test_field_no_annotation)
test_field_without_annotation_but_annotation_in_base(test_field_no_annotation)
test_field_without_annotation_but_annotation_in_base_not_dataclass(test_field_no_annotation)
test_doc_string = TestDocString()
test_existing_docstring_not_overridden(test_doc_string)
test_docstring_no_fields(test_doc_string)
test_docstring_one_field(test_doc_string)
test_docstring_two_fields(test_doc_string)
test_docstring_three_fields(test_doc_string)
test_docstring_one_field_with_default(test_doc_string)
test_docstring_one_field_with_default_none(test_doc_string)
test_docstring_list_field(test_doc_string)
test_docstring_list_field_with_default_factory(test_doc_string)
test_docstring_deque_field(test_doc_string)
test_docstring_deque_field_with_default_factory(test_doc_string)
test_init = TestInit()
test_base_has_init(test_init)
test_no_init(test_init)
test_overwriting_init(test_init)
test_inherit_from_protocol(test_init)
test_repr = TestRepr()
test_repr(test_repr)
test_no_repr(test_repr)
test_overwriting_repr(test_repr)
test_eq = TestEq()
test_no_eq(test_eq)
test_overwriting_eq(test_eq)
test_ordering = TestOrdering()
test_functools_total_ordering(test_ordering)
test_no_order(test_ordering)
test_overwriting_order(test_ordering)
test_hash = TestHash()
test_unsafe_hash(test_hash)
test_hash_rules(test_hash)
test_eq_only(test_hash)
test_0_field_hash(test_hash)
test_1_field_hash(test_hash)
test_hash_no_args(test_hash)
test_frozen = TestFrozen()
test_frozen(test_frozen)
test_inherit(test_frozen)
test_inherit_nonfrozen_from_empty_frozen(test_frozen)
test_inherit_nonfrozen_from_empty(test_frozen)
test_inherit_nonfrozen_from_frozen(test_frozen)
test_inherit_frozen_from_nonfrozen(test_frozen)
test_inherit_from_normal_class(test_frozen)
test_non_frozen_normal_derived(test_frozen)
test_overwriting_frozen(test_frozen)
test_frozen_hash(test_frozen)
test_slots = TestSlots()
test_simple(test_slots)
test_derived_added_field(test_slots)
test_generated_slots(test_slots)
test_add_slots_when_slots_exists(test_slots)
test_generated_slots_value(test_slots)
test_returns_new_class(test_slots)
test_frozen_pickle(test_slots)
test_slots_with_default_no_init(test_slots)
test_slots_with_default_factory_no_init(test_slots)
test_descriptors = TestDescriptors()
test_set_name(test_descriptors)
test_non_descriptor(test_descriptors)
test_lookup_on_instance(test_descriptors)
test_lookup_on_class(test_descriptors)
test_string_annotations = TestStringAnnotations()
test_classvar(test_string_annotations)
test_isnt_classvar(test_string_annotations)
test_initvar(test_string_annotations)
test_isnt_initvar(test_string_annotations)
test_classvar_module_level_import(test_string_annotations)
test_text_annotations(test_string_annotations)
test_make_dataclass = TestMakeDataclass()
test_simple(test_make_dataclass)
test_no_mutate_namespace(test_make_dataclass)
test_base(test_make_dataclass)
test_base_dataclass(test_make_dataclass)
test_init_var(test_make_dataclass)
test_class_var(test_make_dataclass)
test_other_params(test_make_dataclass)
test_no_types(test_make_dataclass)
test_invalid_type_specification(test_make_dataclass)
test_duplicate_field_names(test_make_dataclass)
test_keyword_field_names(test_make_dataclass)
test_non_identifier_field_names(test_make_dataclass)
test_underscore_field_names(test_make_dataclass)
test_funny_class_names_names(test_make_dataclass)
test_replace = TestReplace()
test(test_replace)
test_frozen(test_replace)
test_invalid_field_name(test_replace)
test_invalid_object(test_replace)
test_no_init(test_replace)
test_classvar(test_replace)
test_initvar_is_specified(test_replace)
test_initvar_with_default_value(test_replace)
test_recursive_repr(test_replace)
test_recursive_repr_two_attrs(test_replace)
test_recursive_repr_indirection(test_replace)
test_recursive_repr_indirection_two(test_replace)
test_recursive_repr_misc_attrs(test_replace)
test_abstract = TestAbstract()
test_abc_implementation(test_abstract)
test_maintain_abc(test_abstract)
test_match_args = TestMatchArgs()
test_match_args(test_match_args)
test_explicit_match_args(test_match_args)
test_bpo_43764(test_match_args)
test_match_args_argument(test_match_args)
test_make_dataclasses(test_match_args)
test_keyword_args = TestKeywordArgs()
test_no_classvar_kwarg(test_keyword_args)
test_field_marked_as_kwonly(test_keyword_args)
test_match_args(test_keyword_args)
test_KW_ONLY(test_keyword_args)
test_KW_ONLY_as_string(test_keyword_args)
test_KW_ONLY_twice(test_keyword_args)
test_post_init(test_keyword_args)
test_defaults(test_keyword_args)
test_make_dataclass(test_keyword_args)
i_b_m_test_cases = IBMTestCases()
setUp(i_b_m_test_cases)
explicit_construction_test = ExplicitConstructionTest()
test_explicit_empty(explicit_construction_test)
test_explicit_from_None(explicit_construction_test)
test_explicit_from_int(explicit_construction_test)
test_explicit_from_string(explicit_construction_test)
test_from_legacy_strings(explicit_construction_test)
test_explicit_from_tuples(explicit_construction_test)
test_explicit_from_list(explicit_construction_test)
test_explicit_from_bool(explicit_construction_test)
test_explicit_from_Decimal(explicit_construction_test)
test_explicit_from_float(explicit_construction_test)
test_explicit_context_create_decimal(explicit_construction_test)
test_explicit_context_create_from_float(explicit_construction_test)
test_unicode_digits(explicit_construction_test)
implicit_construction_test = ImplicitConstructionTest()
test_implicit_from_None(implicit_construction_test)
test_implicit_from_int(implicit_construction_test)
test_implicit_from_string(implicit_construction_test)
test_implicit_from_float(implicit_construction_test)
test_implicit_from_Decimal(implicit_construction_test)
test_rop(implicit_construction_test)
format_test = FormatTest()
test_formatting(format_test)
test_n_format(format_test)
test_wide_char_separator_decimal_point(format_test)
test_decimal_from_float_argument_type(format_test)
arithmetic_operators_test = ArithmeticOperatorsTest()
test_addition(arithmetic_operators_test)
test_subtraction(arithmetic_operators_test)
test_multiplication(arithmetic_operators_test)
test_division(arithmetic_operators_test)
test_floor_division(arithmetic_operators_test)
test_powering(arithmetic_operators_test)
test_module(arithmetic_operators_test)
test_floor_div_module(arithmetic_operators_test)
test_unary_operators(arithmetic_operators_test)
test_nan_comparisons(arithmetic_operators_test)
test_copy_sign(arithmetic_operators_test)
threading_test = ThreadingTest()
test_threading(threading_test)
usability_test = UsabilityTest()
test_comparison_operators(usability_test)
test_decimal_float_comparison(usability_test)
test_decimal_complex_comparison(usability_test)
test_decimal_fraction_comparison(usability_test)
test_copy_and_deepcopy_methods(usability_test)
test_hash_method(usability_test)
test_hash_method_nan(usability_test)
test_min_and_max_methods(usability_test)
test_as_nonzero(usability_test)
test_tostring_methods(usability_test)
test_tonum_methods(usability_test)
test_nan_to_float(usability_test)
test_snan_to_float(usability_test)
test_eval_round_trip(usability_test)
test_as_tuple(usability_test)
test_as_integer_ratio(usability_test)
test_subclassing(usability_test)
test_implicit_context(usability_test)
test_none_args(usability_test)
test_conversions_from_int(usability_test)
python_a_p_itests = PythonAPItests()
test_abc(python_a_p_itests)
test_pickle(python_a_p_itests)
test_int(python_a_p_itests)
test_trunc(python_a_p_itests)
test_from_float(python_a_p_itests)
test_create_decimal_from_float(python_a_p_itests)
test_quantize(python_a_p_itests)
test_complex(python_a_p_itests)
test_named_parameters(python_a_p_itests)
test_exception_hierarchy(python_a_p_itests)
context_a_p_itests = ContextAPItests()
test_none_args(context_a_p_itests)
test_from_legacy_strings(context_a_p_itests)
test_pickle(context_a_p_itests)
test_equality_with_other_types(context_a_p_itests)
test_copy(context_a_p_itests)
test__clamp(context_a_p_itests)
test_abs(context_a_p_itests)
test_add(context_a_p_itests)
test_compare(context_a_p_itests)
test_compare_signal(context_a_p_itests)
test_compare_total(context_a_p_itests)
test_compare_total_mag(context_a_p_itests)
test_copy_abs(context_a_p_itests)
test_copy_decimal(context_a_p_itests)
test_copy_negate(context_a_p_itests)
test_copy_sign(context_a_p_itests)
test_divide(context_a_p_itests)
test_divide_int(context_a_p_itests)
test_divmod(context_a_p_itests)
test_exp(context_a_p_itests)
test_fma(context_a_p_itests)
test_is_finite(context_a_p_itests)
test_is_infinite(context_a_p_itests)
test_is_nan(context_a_p_itests)
test_is_normal(context_a_p_itests)
test_is_qnan(context_a_p_itests)
test_is_signed(context_a_p_itests)
test_is_snan(context_a_p_itests)
test_is_subnormal(context_a_p_itests)
test_is_zero(context_a_p_itests)
test_ln(context_a_p_itests)
test_log10(context_a_p_itests)
test_logb(context_a_p_itests)
test_logical_and(context_a_p_itests)
test_logical_invert(context_a_p_itests)
test_logical_or(context_a_p_itests)
test_logical_xor(context_a_p_itests)
test_max(context_a_p_itests)
test_max_mag(context_a_p_itests)
test_min(context_a_p_itests)
test_min_mag(context_a_p_itests)
test_minus(context_a_p_itests)
test_multiply(context_a_p_itests)
test_next_minus(context_a_p_itests)
test_next_plus(context_a_p_itests)
test_next_toward(context_a_p_itests)
test_normalize(context_a_p_itests)
test_number_class(context_a_p_itests)
test_plus(context_a_p_itests)
test_power(context_a_p_itests)
test_quantize(context_a_p_itests)
test_remainder(context_a_p_itests)
test_remainder_near(context_a_p_itests)
test_rotate(context_a_p_itests)
test_sqrt(context_a_p_itests)
test_same_quantum(context_a_p_itests)
test_scaleb(context_a_p_itests)
test_shift(context_a_p_itests)
test_subtract(context_a_p_itests)
test_to_eng_string(context_a_p_itests)
test_to_sci_string(context_a_p_itests)
test_to_integral_exact(context_a_p_itests)
test_to_integral_value(context_a_p_itests)
context_with_statement = ContextWithStatement()
test_localcontext(context_with_statement)
test_localcontextarg(context_with_statement)
test_nested_with_statements(context_with_statement)
test_with_statements_gc1(context_with_statement)
test_with_statements_gc2(context_with_statement)
test_with_statements_gc3(context_with_statement)
context_flags = ContextFlags()
test_flags_irrelevant(context_flags)
test_flag_comparisons(context_flags)
test_float_operation(context_flags)
test_float_comparison(context_flags)
test_float_operation_default(context_flags)
special_contexts = SpecialContexts()
test_context_templates(special_contexts)
test_default_context(special_contexts)
context_input_validation = ContextInputValidation()
test_invalid_context(context_input_validation)
context_subclassing = ContextSubclassing()
test_context_subclassing(context_subclassing)
check_attributes = CheckAttributes()
test_module_attributes(check_attributes)
test_context_attributes(check_attributes)
test_decimal_attributes(check_attributes)
coverage = Coverage()
test_adjusted(coverage)
test_canonical(coverage)
test_context_repr(coverage)
test_implicit_context(coverage)
test_divmod(coverage)
test_power(coverage)
test_quantize(coverage)
test_radix(coverage)
test_rop(coverage)
test_round(coverage)
test_create_decimal(coverage)
test_int(coverage)
test_copy(coverage)
py_functionality = PyFunctionality()
test_py_alternate_formatting(py_functionality)
py_whitebox = PyWhitebox()
test_py_exact_power(py_whitebox)
test_py_immutability_operations(py_whitebox)
test_py_decimal_id(py_whitebox)
test_py_rescale(py_whitebox)
test_py__round(py_whitebox)
c_functionality = CFunctionality()
test_c_ieee_context(c_functionality)
test_c_context(c_functionality)
test_constants(c_functionality)
c_whitebox = CWhitebox()
test_bignum(c_whitebox)
test_invalid_construction(c_whitebox)
test_c_input_restriction(c_whitebox)
test_c_context_repr(c_whitebox)
test_c_context_errors(c_whitebox)
test_rounding_strings_interned(c_whitebox)
test_c_context_errors_extra(c_whitebox)
test_c_valid_context(c_whitebox)
test_c_valid_context_extra(c_whitebox)
test_c_round(c_whitebox)
test_c_format(c_whitebox)
test_c_integral(c_whitebox)
test_c_funcs(c_whitebox)
test_va_args_exceptions(c_whitebox)
test_c_context_templates(c_whitebox)
test_c_signal_dict(c_whitebox)
test_invalid_override(c_whitebox)
test_exact_conversion(c_whitebox)
test_from_tuple(c_whitebox)
test_sizeof(c_whitebox)
test_internal_use_of_overridden_methods(c_whitebox)
test_maxcontext_exact_arith(c_whitebox)
signature_test = SignatureTest()
test_inspect_module(signature_test)
test_inspect_types(signature_test)
dict_test = DictTest()
test_invalid_keyword_arguments(dict_test)
test_constructor(dict_test)
test_literal_constructor(dict_test)
test_merge_operator(dict_test)
test_bool(dict_test)
test_keys(dict_test)
test_values(dict_test)
test_items(dict_test)
test_views_mapping(dict_test)
test_contains(dict_test)
test_len(dict_test)
test_getitem(dict_test)
test_clear(dict_test)
test_update(dict_test)
test_fromkeys(dict_test)
test_copy(dict_test)
test_copy_fuzz(dict_test)
test_copy_maintains_tracking(dict_test)
test_copy_noncompact(dict_test)
test_get(dict_test)
test_setdefault(dict_test)
test_setdefault_atomic(dict_test)
test_setitem_atomic_at_resize(dict_test)
test_popitem(dict_test)
test_pop(dict_test)
test_mutating_iteration(dict_test)
test_mutating_iteration_delete(dict_test)
test_mutating_iteration_delete_over_values(dict_test)
test_mutating_iteration_delete_over_items(dict_test)
test_mutating_lookup(dict_test)
test_repr(dict_test)
test_repr_deep(dict_test)
test_eq(dict_test)
test_keys_contained(dict_test)
test_errors_in_view_containment_check(dict_test)
test_dictview_set_operations_on_keys(dict_test)
test_dictview_set_operations_on_items(dict_test)
test_items_symmetric_difference(dict_test)
test_dictview_mixed_set_operations(dict_test)
test_missing(dict_test)
test_tuple_keyerror(dict_test)
test_bad_key(dict_test)
test_resize1(dict_test)
test_resize2(dict_test)
test_empty_presized_dict_in_freelist(dict_test)
test_container_iterator(dict_test)
test_track_literals(dict_test)
test_track_dynamic(dict_test)
test_track_subtypes(dict_test)
test_splittable_setdefault(dict_test)
test_splittable_del(dict_test)
test_splittable_pop(dict_test)
test_splittable_pop_pending(dict_test)
test_splittable_popitem(dict_test)
test_splittable_setattr_after_pop(dict_test)
test_iterator_pickling(dict_test)
test_itemiterator_pickling(dict_test)
test_valuesiterator_pickling(dict_test)
test_reverseiterator_pickling(dict_test)
test_reverseitemiterator_pickling(dict_test)
test_reversevaluesiterator_pickling(dict_test)
test_instance_dict_getattr_str_subclass(dict_test)
test_object_set_item_single_instance_non_str_key(dict_test)
test_reentrant_insertion(dict_test)
test_merge_and_mutate(dict_test)
test_free_after_iterating(dict_test)
test_equal_operator_modifying_operand(dict_test)
test_fromkeys_operator_modifying_dict_operand(dict_test)
test_fromkeys_operator_modifying_set_operand(dict_test)
test_dictitems_contains_use_after_free(dict_test)
test_dict_contain_use_after_free(dict_test)
test_init_use_after_free(dict_test)
test_oob_indexing_dictiter_iternextitem(dict_test)
test_reversed(dict_test)
test_reverse_iterator_for_empty_dict(dict_test)
test_reverse_iterator_for_shared_shared_dicts(dict_test)
test_dict_copy_order(dict_test)
test_dict_items_result_gc(dict_test)
test_dict_items_result_gc_reversed(dict_test)
test_str_nonstr(dict_test)
c_a_p_i_test = CAPITest()
test_getitem_knownhash(c_a_p_i_test)
dict_version_tests = DictVersionTests()
setUp(dict_version_tests)
test_constructor(dict_version_tests)
test_copy(dict_version_tests)
test_setitem(dict_version_tests)
test_setitem_same_value(dict_version_tests)
test_setitem_equal(dict_version_tests)
test_setdefault(dict_version_tests)
test_delitem(dict_version_tests)
test_pop(dict_version_tests)
test_popitem(dict_version_tests)
test_update(dict_version_tests)
test_clear(dict_version_tests)
dict_comprehension_test = DictComprehensionTest()
test_basics(dict_comprehension_test)
test_scope_isolation(dict_comprehension_test)
test_scope_isolation_from_global(dict_comprehension_test)
test_global_visibility(dict_comprehension_test)
test_local_visibility(dict_comprehension_test)
test_illegal_assignment(dict_comprehension_test)
test_evaluation_order(dict_comprehension_test)
test_assignment_idiom_in_comprehensions(dict_comprehension_test)
test_star_expression(dict_comprehension_test)
dict_set_test = DictSetTest()
test_constructors_not_callable(dict_set_test)
test_dict_keys(dict_set_test)
test_dict_items(dict_set_test)
test_dict_mixed_keys_items(dict_set_test)
test_dict_values(dict_set_test)
test_dict_repr(dict_set_test)
test_keys_set_operations(dict_set_test)
test_items_set_operations(dict_set_test)
test_set_operations_with_iterator(dict_set_test)
test_set_operations_with_noniterable(dict_set_test)
test_recursive_repr(dict_set_test)
test_deeply_nested_repr(dict_set_test)
test_copy(dict_set_test)
test_compare_error(dict_set_test)
test_pickle(dict_set_test)
test_abc_registry(dict_set_test)
e_o_f_test_case = EOFTestCase()
test_EOF_single_quote(e_o_f_test_case)
test_EOFS(e_o_f_test_case)
test_EOFS_with_file(e_o_f_test_case)
test_eof_with_line_continuation(e_o_f_test_case)
test_line_continuation_EOF(e_o_f_test_case)
test_line_continuation_EOF_from_file_bpo2180(e_o_f_test_case)
exception_tests = ExceptionTests()
testRaising(exception_tests)
testSyntaxErrorMessage(exception_tests)
testSyntaxErrorMissingParens(exception_tests)
test_error_offset_continuation_characters(exception_tests)
testSyntaxErrorOffset(exception_tests)
testSettingException(exception_tests)
test_WindowsError(exception_tests)
test_windows_message(exception_tests)
testAttributes(exception_tests)
testWithTraceback(exception_tests)
testInvalidTraceback(exception_tests)
testInvalidAttrs(exception_tests)
testNoneClearsTracebackAttr(exception_tests)
testChainingAttrs(exception_tests)
testChainingDescriptors(exception_tests)
testKeywordArgs(exception_tests)
testInfiniteRecursion(exception_tests)
test_str(exception_tests)
test_exception_cleanup_names(exception_tests)
test_exception_cleanup_names2(exception_tests)
testExceptionCleanupState(exception_tests)
test_exception_target_in_nested_scope(exception_tests)
test_generator_leaking(exception_tests)
test_generator_leaking2(exception_tests)
test_generator_leaking3(exception_tests)
test_generator_leaking4(exception_tests)
test_generator_doesnt_retain_old_exc(exception_tests)
test_generator_finalizing_and_exc_info(exception_tests)
test_generator_throw_cleanup_exc_state(exception_tests)
test_generator_close_cleanup_exc_state(exception_tests)
test_generator_del_cleanup_exc_state(exception_tests)
test_generator_next_cleanup_exc_state(exception_tests)
test_generator_send_cleanup_exc_state(exception_tests)
test_3114(exception_tests)
test_raise_does_not_create_context_chain_cycle(exception_tests)
test_no_hang_on_context_chain_cycle1(exception_tests)
test_no_hang_on_context_chain_cycle2(exception_tests)
test_no_hang_on_context_chain_cycle3(exception_tests)
test_unicode_change_attributes(exception_tests)
test_unicode_errors_no_object(exception_tests)
test_badisinstance(exception_tests)
test_trashcan_recursion(exception_tests)
test_recursion_normalizing_exception(exception_tests)
test_recursion_normalizing_infinite_exception(exception_tests)
test_recursion_in_except_handler(exception_tests)
test_recursion_normalizing_with_no_memory(exception_tests)
test_MemoryError(exception_tests)
test_exception_with_doc(exception_tests)
test_memory_error_cleanup(exception_tests)
test_recursion_error_cleanup(exception_tests)
test_errno_ENOTDIR(exception_tests)
test_unraisable(exception_tests)
test_unhandled(exception_tests)
test_memory_error_in_PyErr_PrintEx(exception_tests)
test_yield_in_nested_try_excepts(exception_tests)
test_generator_doesnt_retain_old_exc2(exception_tests)
test_raise_in_generator(exception_tests)
test_assert_shadowing(exception_tests)
test_memory_error_subclasses(exception_tests)
name_error_tests = NameErrorTests()
test_name_error_has_name(name_error_tests)
test_name_error_suggestions(name_error_tests)
test_name_error_suggestions_from_globals(name_error_tests)
test_name_error_suggestions_from_builtins(name_error_tests)
test_name_error_suggestions_do_not_trigger_for_long_names(name_error_tests)
test_name_error_bad_suggestions_do_not_trigger_for_small_names(name_error_tests)
test_name_error_suggestions_do_not_trigger_for_too_many_locals(name_error_tests)
test_name_error_with_custom_exceptions(name_error_tests)
test_unbound_local_error_doesn_not_match(name_error_tests)
test_issue45826(name_error_tests)
test_issue45826_focused(name_error_tests)
attribute_error_tests = AttributeErrorTests()
test_attributes(attribute_error_tests)
test_getattr_has_name_and_obj(attribute_error_tests)
test_getattr_has_name_and_obj_for_method(attribute_error_tests)
test_getattr_suggestions(attribute_error_tests)
test_getattr_suggestions_do_not_trigger_for_long_attributes(attribute_error_tests)
test_getattr_error_bad_suggestions_do_not_trigger_for_small_names(attribute_error_tests)
test_getattr_suggestions_do_not_trigger_for_big_dicts(attribute_error_tests)
test_getattr_suggestions_no_args(attribute_error_tests)
test_getattr_suggestions_invalid_args(attribute_error_tests)
test_getattr_suggestions_for_same_name(attribute_error_tests)
test_attribute_error_with_failing_dict(attribute_error_tests)
test_attribute_error_with_bad_name(attribute_error_tests)
test_attribute_error_inside_nested_getattr(attribute_error_tests)
import_error_tests = ImportErrorTests()
test_attributes(import_error_tests)
test_reset_attributes(import_error_tests)
test_non_str_argument(import_error_tests)
test_copy_pickle(import_error_tests)
syntax_error_tests = SyntaxErrorTests()
test_range_of_offsets(syntax_error_tests)
test_encodings(syntax_error_tests)
test_non_utf8(syntax_error_tests)
test_attributes_new_constructor(syntax_error_tests)
test_attributes_old_constructor(syntax_error_tests)
test_incorrect_constructor(syntax_error_tests)
p_e_p626_tests = PEP626Tests()
test_lineno_after_raise_simple(p_e_p626_tests)
test_lineno_after_raise_in_except(p_e_p626_tests)
test_lineno_after_other_except(p_e_p626_tests)
test_lineno_in_named_except(p_e_p626_tests)
test_lineno_in_try(p_e_p626_tests)
test_lineno_in_finally_normal(p_e_p626_tests)
test_lineno_in_finally_except(p_e_p626_tests)
test_lineno_after_with(p_e_p626_tests)
test_missing_lineno_shows_as_none(p_e_p626_tests)
test_lineno_after_raise_in_with_exit(p_e_p626_tests)
general_float_cases = GeneralFloatCases()
test_float(general_float_cases)
test_noargs(general_float_cases)
test_underscores(general_float_cases)
test_non_numeric_input_types(general_float_cases)
test_float_memoryview(general_float_cases)
test_error_message(general_float_cases)
test_float_with_comma(general_float_cases)
test_floatconversion(general_float_cases)
test_keyword_args(general_float_cases)
test_is_integer(general_float_cases)
test_floatasratio(general_float_cases)
test_float_containment(general_float_cases)
test_float_floor(general_float_cases)
test_float_ceil(general_float_cases)
test_float_mod(general_float_cases)
test_float_pow(general_float_cases)
test_hash(general_float_cases)
test_hash_nan(general_float_cases)
format_functions_test_case = FormatFunctionsTestCase()
setUp(format_functions_test_case)
test_getformat(format_functions_test_case)
test_setformat(format_functions_test_case)
tearDown(format_functions_test_case)
unknown_format_test_case = UnknownFormatTestCase()
setUp(unknown_format_test_case)
test_double_specials_dont_unpack(unknown_format_test_case)
test_float_specials_dont_unpack(unknown_format_test_case)
tearDown(unknown_format_test_case)
i_e_e_e_format_test_case = IEEEFormatTestCase()
test_double_specials_do_unpack(i_e_e_e_format_test_case)
test_float_specials_do_unpack(i_e_e_e_format_test_case)
test_serialized_float_rounding(i_e_e_e_format_test_case)
format_test_case = FormatTestCase()
test_format(format_test_case)
test_format_testfile(format_test_case)
test_issue5864(format_test_case)
test_issue35560(format_test_case)
repr_test_case = ReprTestCase()
test_repr(repr_test_case)
test_short_repr(repr_test_case)
round_test_case = RoundTestCase()
test_inf_nan(round_test_case)
test_large_n(round_test_case)
test_small_n(round_test_case)
test_overflow(round_test_case)
test_previous_round_bugs(round_test_case)
test_matches_float_format(round_test_case)
test_format_specials(round_test_case)
test_None_ndigits(round_test_case)
inf_nan_test = InfNanTest()
test_inf_from_str(inf_nan_test)
test_inf_as_str(inf_nan_test)
test_nan_from_str(inf_nan_test)
test_nan_as_str(inf_nan_test)
test_inf_signs(inf_nan_test)
test_nan_signs(inf_nan_test)
hex_float_test_case = HexFloatTestCase()
test_ends(hex_float_test_case)
test_invalid_inputs(hex_float_test_case)
test_whitespace(hex_float_test_case)
test_from_hex(hex_float_test_case)
test_roundtrip(hex_float_test_case)
test_subclass(hex_float_test_case)
format_test = FormatTest()
test_common_format(format_test)
test_str_format(format_test)
test_bytes_and_bytearray_format(format_test)
test_nul(format_test)
test_non_ascii(format_test)
test_locale(format_test)
test_optimisations(format_test)
test_precision(format_test)
test_precision_c_limits(format_test)
test_g_format_has_no_trailing_zeros(format_test)
test_with_two_commas_in_format_specifier(format_test)
test_with_two_underscore_in_format_specifier(format_test)
test_with_a_commas_and_an_underscore_in_format_specifier(format_test)
test_with_an_underscore_and_a_comma_in_format_specifier(format_test)
fraction_test = FractionTest()
testInit(fraction_test)
testInitFromFloat(fraction_test)
testInitFromDecimal(fraction_test)
testFromString(fraction_test)
testImmutable(fraction_test)
testFromFloat(fraction_test)
testFromDecimal(fraction_test)
test_as_integer_ratio(fraction_test)
testLimitDenominator(fraction_test)
testConversions(fraction_test)
testBoolGuarateesBoolReturn(fraction_test)
testRound(fraction_test)
testArithmetic(fraction_test)
testLargeArithmetic(fraction_test)
testMixedArithmetic(fraction_test)
testMixingWithDecimal(fraction_test)
testComparisons(fraction_test)
testComparisonsDummyRational(fraction_test)
testComparisonsDummyFloat(fraction_test)
testMixedLess(fraction_test)
testMixedLessEqual(fraction_test)
testBigFloatComparisons(fraction_test)
testBigComplexComparisons(fraction_test)
testMixedEqual(fraction_test)
testStringification(fraction_test)
testHash(fraction_test)
testApproximatePi(fraction_test)
testApproximateCos1(fraction_test)
test_copy_deepcopy_pickle(fraction_test)
test_slots(fraction_test)
test_int_subclass(fraction_test)
test_frozen = TestFrozen()
test_frozen(test_frozen)
test_case = TestCase()
test__format__lookup(test_case)
test_ast(test_case)
test_ast_line_numbers(test_case)
test_ast_line_numbers_multiple_formattedvalues(test_case)
test_ast_line_numbers_nested(test_case)
test_ast_line_numbers_duplicate_expression(test_case)
test_ast_numbers_fstring_with_formatting(test_case)
test_ast_line_numbers_multiline_fstring(test_case)
test_ast_line_numbers_with_parentheses(test_case)
test_docstring(test_case)
test_literal_eval(test_case)
test_ast_compile_time_concat(test_case)
test_compile_time_concat_errors(test_case)
test_literal(test_case)
test_unterminated_string(test_case)
test_mismatched_parens(test_case)
test_double_braces(test_case)
test_compile_time_concat(test_case)
test_comments(test_case)
test_many_expressions(test_case)
test_format_specifier_expressions(test_case)
test_side_effect_order(test_case)
test_missing_expression(test_case)
test_parens_in_expressions(test_case)
test_newlines_before_syntax_error(test_case)
test_backslashes_in_string_part(test_case)
test_misformed_unicode_character_name(test_case)
test_no_backslashes_in_expression_part(test_case)
test_no_escapes_for_braces(test_case)
test_newlines_in_expressions(test_case)
test_lambda(test_case)
test_yield(test_case)
test_yield_send(test_case)
test_expressions_with_triple_quoted_strings(test_case)
test_multiple_vars(test_case)
test_closure(test_case)
test_arguments(test_case)
test_locals(test_case)
test_missing_variable(test_case)
test_missing_format_spec(test_case)
test_global(test_case)
test_shadowed_global(test_case)
test_call(test_case)
test_nested_fstrings(test_case)
test_invalid_string_prefixes(test_case)
test_leading_trailing_spaces(test_case)
test_not_equal(test_case)
test_equal_equal(test_case)
test_conversions(test_case)
test_assignment(test_case)
test_del(test_case)
test_mismatched_braces(test_case)
test_if_conditional(test_case)
test_empty_format_specifier(test_case)
test_str_format_differences(test_case)
test_errors(test_case)
test_filename_in_syntaxerror(test_case)
test_loop(test_case)
test_dict(test_case)
test_backslash_char(test_case)
test_debug_conversion(test_case)
test_walrus(test_case)
test_invalid_syntax_error_message(test_case)
test_with_two_commas_in_format_specifier(test_case)
test_with_two_underscore_in_format_specifier(test_case)
test_with_a_commas_and_an_underscore_in_format_specifier(test_case)
test_with_an_underscore_and_a_comma_in_format_specifier(test_case)
test_syntax_error_for_starred_expressions(test_case)
test_p_e_p479 = TestPEP479()
test_stopiteration_wrapping(test_p_e_p479)
test_stopiteration_wrapping_context(test_p_e_p479)
signal_and_yield_from_test = SignalAndYieldFromTest()
test_raise_and_yield_from(signal_and_yield_from_test)
finalization_test = FinalizationTest()
test_frame_resurrect(finalization_test)
test_refcycle(finalization_test)
test_lambda_generator(finalization_test)
generator_test = GeneratorTest()
test_name(generator_test)
test_copy(generator_test)
test_pickle(generator_test)
test_send_non_none_to_new_gen(generator_test)
exception_test = ExceptionTest()
test_except_throw(exception_test)
test_except_next(exception_test)
test_except_gen_except(exception_test)
test_except_throw_exception_context(exception_test)
test_except_throw_bad_exception(exception_test)
test_stopiteration_error(exception_test)
test_tutorial_stopiteration(exception_test)
test_return_tuple(exception_test)
test_return_stopiteration(exception_test)
generator_throw_test = GeneratorThrowTest()
test_exception_context_with_yield(generator_throw_test)
test_exception_context_with_yield_inside_generator(generator_throw_test)
test_exception_context_with_yield_from(generator_throw_test)
test_exception_context_with_yield_from_with_context_cycle(generator_throw_test)
test_throw_after_none_exc_type(generator_throw_test)
generator_stack_trace_test = GeneratorStackTraceTest()
test_send_with_yield_from(generator_stack_trace_test)
test_throw_with_yield_from(generator_stack_trace_test)
yield_from_tests = YieldFromTests()
test_generator_gi_yieldfrom(yield_from_tests)
global_tests = GlobalTests()
setUp(global_tests)
test1(global_tests)
test2(global_tests)
test3(global_tests)
test4(global_tests)
tearDown(global_tests)
int_test_cases = IntTestCases()
test_basic(int_test_cases)
test_underscores(int_test_cases)
test_small_ints(int_test_cases)
test_no_args(int_test_cases)
test_keyword_args(int_test_cases)
test_int_base_limits(int_test_cases)
test_int_base_bad_types(int_test_cases)
test_int_base_indexable(int_test_cases)
test_non_numeric_input_types(int_test_cases)
test_int_memoryview(int_test_cases)
test_string_float(int_test_cases)
test_intconversion(int_test_cases)
test_int_subclass_with_index(int_test_cases)
test_int_subclass_with_int(int_test_cases)
test_int_returns_int_subclass(int_test_cases)
test_error_message(int_test_cases)
test_issue31619(int_test_cases)
test_hex_oct_bin = TestHexOctBin()
test_hex_baseline(test_hex_oct_bin)
test_hex_unsigned(test_hex_oct_bin)
test_oct_baseline(test_hex_oct_bin)
test_oct_unsigned(test_hex_oct_bin)
test_bin_baseline(test_hex_oct_bin)
test_bin_unsigned(test_hex_oct_bin)
test_is_instance_exceptions = TestIsInstanceExceptions()
test_class_has_no_bases(test_is_instance_exceptions)
test_bases_raises_other_than_attribute_error(test_is_instance_exceptions)
test_dont_mask_non_attribute_error(test_is_instance_exceptions)
test_mask_attribute_error(test_is_instance_exceptions)
test_isinstance_dont_mask_non_attribute_error(test_is_instance_exceptions)
test_is_subclass_exceptions = TestIsSubclassExceptions()
test_dont_mask_non_attribute_error(test_is_subclass_exceptions)
test_mask_attribute_error(test_is_subclass_exceptions)
test_dont_mask_non_attribute_error_in_cls_arg(test_is_subclass_exceptions)
test_mask_attribute_error_in_cls_arg(test_is_subclass_exceptions)
test_is_instance_is_subclass = TestIsInstanceIsSubclass()
test_isinstance_normal(test_is_instance_is_subclass)
test_isinstance_abstract(test_is_instance_is_subclass)
test_subclass_normal(test_is_instance_is_subclass)
test_subclass_abstract(test_is_instance_is_subclass)
test_subclass_tuple(test_is_instance_is_subclass)
test_subclass_recursion_limit(test_is_instance_is_subclass)
test_isinstance_recursion_limit(test_is_instance_is_subclass)
test_issubclass_refcount_handling(test_is_instance_is_subclass)
test_infinite_recursion_in_bases(test_is_instance_is_subclass)
test_infinite_recursion_via_bases_tuple(test_is_instance_is_subclass)
test_infinite_cycle_in_bases(test_is_instance_is_subclass)
test_infinitely_many_bases(test_is_instance_is_subclass)
test_case = TestCase()
test_iter_basic(test_case)
test_iter_idempotency(test_case)
test_iter_for_loop(test_case)
test_iter_independence(test_case)
test_nested_comprehensions_iter(test_case)
test_nested_comprehensions_for(test_case)
test_iter_class_for(test_case)
test_iter_class_iter(test_case)
test_seq_class_for(test_case)
test_seq_class_iter(test_case)
test_mutating_seq_class_iter_pickle(test_case)
test_mutating_seq_class_exhausted_iter(test_case)
test_new_style_iter_class(test_case)
test_iter_callable(test_case)
test_iter_function(test_case)
test_iter_function_stop(test_case)
test_exception_function(test_case)
test_exception_sequence(test_case)
test_stop_sequence(test_case)
test_iter_big_range(test_case)
test_iter_empty(test_case)
test_iter_tuple(test_case)
test_iter_range(test_case)
test_iter_string(test_case)
test_iter_dict(test_case)
test_iter_file(test_case)
test_builtin_list(test_case)
test_builtin_tuple(test_case)
test_builtin_filter(test_case)
test_builtin_max_min(test_case)
test_builtin_map(test_case)
test_builtin_zip(test_case)
test_unicode_join_endcase(test_case)
test_in_and_not_in(test_case)
test_countOf(test_case)
test_indexOf(test_case)
test_writelines(test_case)
test_unpack_iter(test_case)
test_ref_counting_behavior(test_case)
test_sinkstate_list(test_case)
test_sinkstate_tuple(test_case)
test_sinkstate_string(test_case)
test_sinkstate_sequence(test_case)
test_sinkstate_callable(test_case)
test_sinkstate_dict(test_case)
test_sinkstate_yield(test_case)
test_sinkstate_range(test_case)
test_sinkstate_enumerate(test_case)
test_3720(test_case)
test_extending_list_with_iterator_does_not_segfault(test_case)
test_iter_overflow(test_case)
test_iter_neg_setstate(test_case)
test_free_after_iterating(test_case)
test_error_iter(test_case)
test_repeat = TestRepeat()
setUp(test_repeat)
test_xrange = TestXrange()
setUp(test_xrange)
test_xrange_custom_reversed = TestXrangeCustomReversed()
setUp(test_xrange_custom_reversed)
test_tuple = TestTuple()
setUp(test_tuple)
test_deque = TestDeque()
setUp(test_deque)
test_deque_reversed = TestDequeReversed()
setUp(test_deque_reversed)
test_dict_keys = TestDictKeys()
setUp(test_dict_keys)
test_dict_items = TestDictItems()
setUp(test_dict_items)
test_dict_values = TestDictValues()
setUp(test_dict_values)
test_set = TestSet()
setUp(test_set)
test_list = TestList()
setUp(test_list)
test_mutation(test_list)
test_list_reversed = TestListReversed()
setUp(test_list_reversed)
test_mutation(test_list_reversed)
test_length_hint_exceptions = TestLengthHintExceptions()
test_issue1242657(test_length_hint_exceptions)
test_invalid_hint(test_length_hint_exceptions)
keyword_only_arg_test_case = KeywordOnlyArgTestCase()
testSyntaxErrorForFunctionDefinition(keyword_only_arg_test_case)
testSyntaxForManyArguments(keyword_only_arg_test_case)
testTooManyPositionalErrorMessage(keyword_only_arg_test_case)
testSyntaxErrorForFunctionCall(keyword_only_arg_test_case)
testRaiseErrorFuncallWithUnexpectedKeywordArgument(keyword_only_arg_test_case)
testFunctionCall(keyword_only_arg_test_case)
testKwDefaults(keyword_only_arg_test_case)
test_kwonly_methods(keyword_only_arg_test_case)
test_issue13343(keyword_only_arg_test_case)
test_mangling(keyword_only_arg_test_case)
test_default_evaluation_order(keyword_only_arg_test_case)
long_test = LongTest()
test_division(long_test)
test_karatsuba(long_test)
test_bitop_identities(long_test)
test_format(long_test)
test_long(long_test)
test_conversion(long_test)
test_float_conversion(long_test)
test_float_overflow(long_test)
test_logs(long_test)
test_mixed_compares(long_test)
test__format__(long_test)
test_nan_inf(long_test)
test_mod_division(long_test)
test_true_division(long_test)
test_floordiv(long_test)
test_correctly_rounded_true_division(long_test)
test_negative_shift_count(long_test)
test_lshift_of_zero(long_test)
test_huge_lshift_of_zero(long_test)
test_huge_lshift(long_test)
test_huge_rshift(long_test)
test_huge_rshift_of_huge(long_test)
test_small_ints_in_huge_calculation(long_test)
test_small_ints(long_test)
test_bit_length(long_test)
test_bit_count(long_test)
test_round(long_test)
test_to_bytes(long_test)
test_from_bytes(long_test)
test_access_to_nonexistent_digit_0(long_test)
test_shift_bool(long_test)
test_as_integer_ratio(long_test)
long_exp_text = LongExpText()
test_longexp(long_exp_text)
else
file = @__FILE__
end
test_dir = os.dirname(file)||os.curdir
math_testcases = os.join(test_dir, "math_testcases.txt")
test_file = os.join(test_dir, "cmath_testcases.txt")
function to_ulps(x)
#= Convert a non-NaN float x to an integer, in such a way that
    adjacent floats are converted to adjacent integers.  Then
    abs(ulps(x) - ulps(y)) gives the difference in ulps between two
    floats.

    The results from this function will only make sense on platforms
    where native doubles are represented in IEEE 754 binary64 format.

    Note: 0.0 and -0.0 are converted to 0 and -1, respectively.
     =#
n = struct_.unpack("<q", struct_.pack("<d", x))[1]
if n < 0
n = ~(n + 2^63)
end
return n
end

function count_set_bits(n)
#= Number of '1' bits in binary expansion of a nonnnegative integer. =#
return n ? (1 + count_set_bits(n & (n - 1))) : (0)
end

function partial_product(start, stop)
#= Product of integers in range(start, stop, 2), computed recursively.
    start and stop should both be odd, with start <= stop.

     =#
numfactors = (stop - start) >> 1
if !numfactors
return 1
elseif numfactors == 1
return start
else
mid = start + numfactors | 1
return partial_product(start, mid)*partial_product(mid, stop)
end
end

function py_factorial(n)
#= Factorial of nonnegative integer n, via "Binary Split Factorial Formula"
    described at http://www.luschny.de/math/factorial/binarysplitfact.html

     =#
inner=outer = 1
for i in reversed(0:bit_length(n) - 1)
inner *= partial_product(((n >> (i + 1)) + 1) | 1, ((n >> i) + 1) | 1)
outer *= inner
end
return outer << (n - count_set_bits(n))
end

function ulp_abs_check(expected, got, ulp_tol, abs_tol)::String
#= Given finite floats `expected` and `got`, check that they're
    approximately equal to within the given number of ulps or the
    given absolute tolerance, whichever is bigger.

    Returns None on success and an error message on failure.
     =#
ulp_error = abs(to_ulps(expected) - to_ulps(got))
abs_error = abs(expected - got)
if abs_error <= abs_tol||ulp_error <= ulp_tol
return nothing
else
fmt = "error = {:.3g} ({:d} ulps); permitted error = {:.3g} or {:d} ulps"
return fmt
end
end

@resumable function parse_mtestfile(fname)
readline(fname) do fp 
for line in fp
if "--" ∈ line
line = line[begin:index(line, "--")]
end
if !strip(line)
continue;
end
(lhs, rhs) = split(line, "->")
(id, fn, arg) = split(lhs)
rhs_pieces = split(rhs)
exp_ = rhs_pieces[1]
flags = rhs_pieces[2:end]
@yield (id, fn, float(arg), float(exp_), flags)
end
end
end

@resumable function parse_testfile(fname)
readline(fname) do fp 
for line in fp
if startswith(line, "--")||!strip(line)
continue;
end
(lhs, rhs) = split(line, "->")
(id, fn, arg_real, arg_imag) = split(lhs)
rhs_pieces = split(rhs)
(exp_real, exp_imag) = (rhs_pieces[1], rhs_pieces[2])
flags = rhs_pieces[3:end]
@yield (id, fn, float(arg_real), float(arg_imag), float(exp_real), float(exp_imag), flags)
end
end
end

function result_check(expected, got, ulp_tol = 5, abs_tol = 0.0)::String
#= Compare arguments expected and got, as floats, if either
    is a float, using a tolerance expressed in multiples of
    ulp(expected) or absolutely (if given and greater).

    As a convenience, when neither argument is a float, and for
    non-finite floats, exact equality is demanded. Also, nan==nan
    as far as this function is concerned.

    Returns None on success and an error message on failure.
     =#
if got == expected
return nothing
end
failure = "not equal"
if isa(expected, Float64)&&isa(got, Int64)
got = float(got)
elseif isa(got, Float64)&&isa(expected, Int64)
expected = float(expected)
end
if isa(expected, Float64)&&isa(got, Float64)
if math.isnan(expected)&&math.isnan(got)
failure = nothing
elseif math.isinf(expected)||math.isinf(got)
#= pass =#
else
failure = ulp_abs_check(expected, got, ulp_tol, abs_tol)
end
end
if failure !== nothing
fail_fmt = "expected {!r}, got {!r}"
fail_msg = fail_fmt
fail_msg += " ($(failure))"
return fail_msg
else
return nothing
end
end

@oodef mutable struct FloatLike
                    
                    value
                    
function new(value)
@mk begin
value = value
end
end

                end
                function __float__(self::@like(FloatLike))
return self.value
end


@oodef mutable struct IntSubclass <: Int64
                    
                    
                    
                end
                

@oodef mutable struct MyIndexable <: object
                    
                    value
                    
function new(value)
@mk begin
value = value
end
end

                end
                function __index__(self::@like(MyIndexable))
return self.value
end


@oodef mutable struct TestCeil
                    
                    
                    
                end
                function __ceil__(self::@like(TestCeil))::Int64
return 42
end


@oodef mutable struct FloatCeil <: Float64
                    
                    
                    
                end
                function __ceil__(self::@like(FloatCeil))::Int64
return 42
end


@oodef mutable struct TestNoCeil
                    
                    
                    
                end
                

@oodef mutable struct TestFloor
                    
                    
                    
                end
                function __floor__(self::@like(TestFloor))::Int64
return 42
end


@oodef mutable struct FloatFloor <: Float64
                    
                    
                    
                end
                function __floor__(self::@like(FloatFloor))::Int64
return 42
end


@oodef mutable struct TestNoFloor
                    
                    
                    
                end
                

@oodef mutable struct T <: Tuple
                    
                    
                    
                end
                

@oodef mutable struct IntegerLike <: object
                    
                    value
                    
function new(value)
@mk begin
value = value
end
end

                end
                function __index__(self::@like(IntegerLike))
return self.value
end


@oodef mutable struct TestTrunc
                    
                    
                    
                end
                function __trunc__(self::@like(TestTrunc))::Int64
return 23
end


@oodef mutable struct FloatTrunc <: Float64
                    
                    
                    
                end
                function __trunc__(self::@like(FloatTrunc))::Int64
return 23
end


@oodef mutable struct TestNoTrunc
                    
                    
                    
                end
                

@oodef mutable struct F
                    
                    converted::Bool
                    
function new(converted::Bool = true)
converted = converted
new(converted)
end

                end
                function __float__(self::@like(F))
self.converted = true
1 / 0
end


@oodef mutable struct MathTests <: unittest.TestCase
                    
                    
                    
                end
                function ftest(self::@like(MathTests), name, got, expected, ulp_tol = 5, abs_tol = 0.0)
#= Compare arguments expected and got, as floats, if either
        is a float, using a tolerance expressed in multiples of
        ulp(expected) or absolutely, whichever is greater.

        As a convenience, when neither argument is a float, and for
        non-finite floats, exact equality is demanded. Also, nan==nan
        in this function.
         =#
failure = result_check(expected, got, ulp_tol, abs_tol)
if failure !== nothing
fail(self, "$(name): $(failure)")
end
end

function testConstants(self::@like(MathTests))
ftest(self, "pi", math.pi, 3.141592653589793)
ftest(self, "e", math.e, 2.718281828459045)
@test (math.tau == 2*math.pi)
end

function testAcos(self::@like(MathTests))
@test_throws
ftest(self, "acos(-1)", acos(-1), math.pi)
ftest(self, "acos(0)", acos(0), math.pi / 2)
ftest(self, "acos(1)", acos(1), 0)
@test_throws
@test_throws
@test_throws
@test_throws
@test math.isnan(acos(NAN))
end

function testAcosh(self::@like(MathTests))
@test_throws
ftest(self, "acosh(1)", math.acosh(1), 0)
ftest(self, "acosh(2)", math.acosh(2), 1.3169578969248168)
@test_throws
@test_throws
@test (math.acosh(INF) == INF)
@test_throws
@test math.isnan(math.acosh(NAN))
end

function testAsin(self::@like(MathTests))
@test_throws
ftest(self, "asin(-1)", asin(-1), -(math.pi) / 2)
ftest(self, "asin(0)", asin(0), 0)
ftest(self, "asin(1)", asin(1), math.pi / 2)
@test_throws
@test_throws
@test_throws
@test_throws
@test math.isnan(asin(NAN))
end

function testAsinh(self::@like(MathTests))
@test_throws
ftest(self, "asinh(0)", math.asinh(0), 0)
ftest(self, "asinh(1)", math.asinh(1), 0.881373587019543)
ftest(self, "asinh(-1)", math.asinh(-1), -0.881373587019543)
@test (math.asinh(INF) == INF)
@test (math.asinh(NINF) == NINF)
@test math.isnan(math.asinh(NAN))
end

function testAtan(self::@like(MathTests))
@test_throws
ftest(self, "atan(-1)", atan(-1), -(math.pi) / 4)
ftest(self, "atan(0)", atan(0), 0)
ftest(self, "atan(1)", atan(1), math.pi / 4)
ftest(self, "atan(inf)", atan(INF), math.pi / 2)
ftest(self, "atan(-inf)", atan(NINF), -(math.pi) / 2)
@test math.isnan(atan(NAN))
end

function testAtanh(self::@like(MathTests))
@test_throws
ftest(self, "atanh(0)", math.atanh(0), 0)
ftest(self, "atanh(0.5)", math.atanh(0.5), 0.5493061443340549)
ftest(self, "atanh(-0.5)", math.atanh(-0.5), -0.5493061443340549)
@test_throws
@test_throws
@test_throws
@test_throws
@test math.isnan(math.atanh(NAN))
end

function testAtan2(self::@like(MathTests))
@test_throws
ftest(self, "atan2(-1, 0)", math.atan2(-1, 0), -(math.pi) / 2)
ftest(self, "atan2(-1, 1)", math.atan2(-1, 1), -(math.pi) / 4)
ftest(self, "atan2(0, 1)", math.atan2(0, 1), 0)
ftest(self, "atan2(1, 1)", math.atan2(1, 1), math.pi / 4)
ftest(self, "atan2(1, 0)", math.atan2(1, 0), math.pi / 2)
ftest(self, "atan2(0., -inf)", math.atan2(0.0, NINF), math.pi)
ftest(self, "atan2(0., -2.3)", math.atan2(0.0, -2.3), math.pi)
ftest(self, "atan2(0., -0.)", math.atan2(0.0, -0.0), math.pi)
@test (math.atan2(0.0, 0.0) == 0.0)
@test (math.atan2(0.0, 2.3) == 0.0)
@test (math.atan2(0.0, INF) == 0.0)
@test math.isnan(math.atan2(0.0, NAN))
ftest(self, "atan2(-0., -inf)", math.atan2(-0.0, NINF), -(math.pi))
ftest(self, "atan2(-0., -2.3)", math.atan2(-0.0, -2.3), -(math.pi))
ftest(self, "atan2(-0., -0.)", math.atan2(-0.0, -0.0), -(math.pi))
@test (math.atan2(-0.0, 0.0) == -0.0)
@test (math.atan2(-0.0, 2.3) == -0.0)
@test (math.atan2(-0.0, INF) == -0.0)
@test math.isnan(math.atan2(-0.0, NAN))
ftest(self, "atan2(inf, -inf)", math.atan2(INF, NINF), math.pi*3 / 4)
ftest(self, "atan2(inf, -2.3)", math.atan2(INF, -2.3), math.pi / 2)
ftest(self, "atan2(inf, -0.)", math.atan2(INF, -0.0), math.pi / 2)
ftest(self, "atan2(inf, 0.)", math.atan2(INF, 0.0), math.pi / 2)
ftest(self, "atan2(inf, 2.3)", math.atan2(INF, 2.3), math.pi / 2)
ftest(self, "atan2(inf, inf)", math.atan2(INF, INF), math.pi / 4)
@test math.isnan(math.atan2(INF, NAN))
ftest(self, "atan2(-inf, -inf)", math.atan2(NINF, NINF), -(math.pi)*3 / 4)
ftest(self, "atan2(-inf, -2.3)", math.atan2(NINF, -2.3), -(math.pi) / 2)
ftest(self, "atan2(-inf, -0.)", math.atan2(NINF, -0.0), -(math.pi) / 2)
ftest(self, "atan2(-inf, 0.)", math.atan2(NINF, 0.0), -(math.pi) / 2)
ftest(self, "atan2(-inf, 2.3)", math.atan2(NINF, 2.3), -(math.pi) / 2)
ftest(self, "atan2(-inf, inf)", math.atan2(NINF, INF), -(math.pi) / 4)
@test math.isnan(math.atan2(NINF, NAN))
ftest(self, "atan2(2.3, -inf)", math.atan2(2.3, NINF), math.pi)
ftest(self, "atan2(2.3, -0.)", math.atan2(2.3, -0.0), math.pi / 2)
ftest(self, "atan2(2.3, 0.)", math.atan2(2.3, 0.0), math.pi / 2)
@test (math.atan2(2.3, INF) == 0.0)
@test math.isnan(math.atan2(2.3, NAN))
ftest(self, "atan2(-2.3, -inf)", math.atan2(-2.3, NINF), -(math.pi))
ftest(self, "atan2(-2.3, -0.)", math.atan2(-2.3, -0.0), -(math.pi) / 2)
ftest(self, "atan2(-2.3, 0.)", math.atan2(-2.3, 0.0), -(math.pi) / 2)
@test (math.atan2(-2.3, INF) == -0.0)
@test math.isnan(math.atan2(-2.3, NAN))
@test math.isnan(math.atan2(NAN, NINF))
@test math.isnan(math.atan2(NAN, -2.3))
@test math.isnan(math.atan2(NAN, -0.0))
@test math.isnan(math.atan2(NAN, 0.0))
@test math.isnan(math.atan2(NAN, 2.3))
@test math.isnan(math.atan2(NAN, INF))
@test math.isnan(math.atan2(NAN, NAN))
end

function testCeil(self::@like(MathTests))
@test_throws
@test (Int64 == type_(math.ceil(0.5)))
@test (math.ceil(0.5) == 1)
@test (math.ceil(1.0) == 1)
@test (math.ceil(1.5) == 2)
@test (math.ceil(-0.5) == 0)
@test (math.ceil(-1.0) == -1)
@test (math.ceil(-1.5) == -1)
@test (math.ceil(0.0) == 0)
@test (math.ceil(-0.0) == 0)
@test (math.ceil(TestCeil()) == 42)
@test (math.ceil(FloatCeil()) == 42)
@test (math.ceil(FloatLike(42.5)) == 43)
@test_throws
t = TestNoCeil()
t.__ceil__ = () -> args
@test_throws
@test_throws
end

function testCopysign(self::@like(MathTests))
@test (math.copysign(1, 42) == 1.0)
@test (math.copysign(0.0, 42) == 0.0)
@test (math.copysign(1.0, -42) == -1.0)
@test (math.copysign(3, 0.0) == 3.0)
@test (math.copysign(4.0, -0.0) == -4.0)
@test_throws
@test (math.copysign(1.0, 0.0) == 1.0)
@test (math.copysign(1.0, -0.0) == -1.0)
@test (math.copysign(INF, 0.0) == INF)
@test (math.copysign(INF, -0.0) == NINF)
@test (math.copysign(NINF, 0.0) == INF)
@test (math.copysign(NINF, -0.0) == NINF)
@test (math.copysign(1.0, INF) == 1.0)
@test (math.copysign(1.0, NINF) == -1.0)
@test (math.copysign(INF, INF) == INF)
@test (math.copysign(INF, NINF) == NINF)
@test (math.copysign(NINF, INF) == INF)
@test (math.copysign(NINF, NINF) == NINF)
@test math.isnan(math.copysign(NAN, 1.0))
@test math.isnan(math.copysign(NAN, INF))
@test math.isnan(math.copysign(NAN, NINF))
@test math.isnan(math.copysign(NAN, NAN))
@test math.isinf(math.copysign(INF, NAN))
@test (abs(math.copysign(2.0, NAN)) == 2.0)
end

function testCos(self::@like(MathTests))
@test_throws
ftest(self, "cos(-pi/2)", cos(-(math.pi) / 2), 0, abs_tol = math.ulp(1))
ftest(self, "cos(0)", cos(0), 1)
ftest(self, "cos(pi/2)", cos(math.pi / 2), 0, abs_tol = math.ulp(1))
ftest(self, "cos(pi)", cos(math.pi), -1)
try
@test math.isnan(cos(INF))
@test math.isnan(cos(NINF))
catch exn
if exn isa ValueError
@test_throws
@test_throws
end
end
@test math.isnan(cos(NAN))
end

function testCosh(self::@like(MathTests))
@test_throws
ftest(self, "cosh(0)", math.cosh(0), 1)
ftest(self, "cosh(2)-2*cosh(1)**2", math.cosh(2) - 2*math.cosh(1)^2, -1)
@test (math.cosh(INF) == INF)
@test (math.cosh(NINF) == INF)
@test math.isnan(math.cosh(NAN))
end

function testDegrees(self::@like(MathTests))
@test_throws
ftest(self, "degrees(pi)", math.degrees(math.pi), 180.0)
ftest(self, "degrees(pi/2)", math.degrees(math.pi / 2), 90.0)
ftest(self, "degrees(-pi/4)", math.degrees(-(math.pi) / 4), -45.0)
ftest(self, "degrees(0)", math.degrees(0), 0)
end

function testExp(self::@like(MathTests))
@test_throws
ftest(self, "exp(-1)", math.exp(-1), 1 / math.e)
ftest(self, "exp(0)", math.exp(0), 1)
ftest(self, "exp(1)", math.exp(1), math.e)
@test (math.exp(INF) == INF)
@test (math.exp(NINF) == 0.0)
@test math.isnan(math.exp(NAN))
@test_throws
end

function testFabs(self::@like(MathTests))
@test_throws
ftest(self, "fabs(-1)", math.fabs(-1), 1)
ftest(self, "fabs(0)", math.fabs(0), 0)
ftest(self, "fabs(1)", math.fabs(1), 1)
end

function testFactorial(self::@like(MathTests))
@test (math.factorial(0) == 1)
total = 1
for i in 1:999
total *= i
@test (math.factorial(i) == total)
@test (math.factorial(i) == py_factorial(i))
end
@test_throws
@test_throws
end

function testFactorialNonIntegers(self::@like(MathTests))
@test_throws
@test_throws
@test_throws
@test_throws
@test_throws
@test_throws
@test_throws
end

function testFactorialHugeInputs(self::@like(MathTests))
@test_throws
@test_throws
end

function testFloor(self::@like(MathTests))
@test_throws
@test (Int64 == type_(floor(Int, 0.5)))
@test (floor(Int, 0.5) == 0)
@test (floor(Int, 1.0) == 1)
@test (floor(Int, 1.5) == 1)
@test (floor(Int, -0.5) == -1)
@test (floor(Int, -1.0) == -1)
@test (floor(Int, -1.5) == -2)
@test (floor(Int, TestFloor()) == 42)
@test (floor(Int, FloatFloor()) == 42)
@test (floor(Int, FloatLike(41.9)) == 41)
@test_throws
t = TestNoFloor()
t.__floor__ = () -> args
@test_throws
@test_throws
end

function testFmod(self::@like(MathTests))
@test_throws
ftest(self, "fmod(10, 1)", math.fmod(10, 1), 0.0)
ftest(self, "fmod(10, 0.5)", math.fmod(10, 0.5), 0.0)
ftest(self, "fmod(10, 1.5)", math.fmod(10, 1.5), 1.0)
ftest(self, "fmod(-10, 1)", math.fmod(-10, 1), -0.0)
ftest(self, "fmod(-10, 0.5)", math.fmod(-10, 0.5), -0.0)
ftest(self, "fmod(-10, 1.5)", math.fmod(-10, 1.5), -1.0)
@test math.isnan(math.fmod(NAN, 1.0))
@test math.isnan(math.fmod(1.0, NAN))
@test math.isnan(math.fmod(NAN, NAN))
@test_throws
@test_throws
@test_throws
@test_throws
@test (math.fmod(3.0, INF) == 3.0)
@test (math.fmod(-3.0, INF) == -3.0)
@test (math.fmod(3.0, NINF) == 3.0)
@test (math.fmod(-3.0, NINF) == -3.0)
@test (math.fmod(0.0, 3.0) == 0.0)
@test (math.fmod(0.0, NINF) == 0.0)
end

function testFrexp(self::@like(MathTests))
@test_throws
function testfrexp(name::@like(MathTests), result, expected)
((mant, exp), (emant, eexp)) = (result, expected)
if abs(mant - emant) > eps_||exp != eexp
fail(self, "$(name) returned $(result), expected $(expected)")
end
end

testfrexp("frexp(-1)", math.frexp(-1), (-0.5, 1))
testfrexp("frexp(0)", math.frexp(0), (0, 0))
testfrexp("frexp(1)", math.frexp(1), (0.5, 1))
testfrexp("frexp(2)", math.frexp(2), (0.5, 2))
@test (math.frexp(INF)[1] == INF)
@test (math.frexp(NINF)[1] == NINF)
@test math.isnan(math.frexp(NAN)[1])
end

function testFsum(self::@like(MathTests))
mant_dig = float_info.mant_dig
etiny = float_info.min_exp - mant_dig
function msum(iterable::@like(MathTests))
#= Full precision summation.  Compute sum(iterable) without any
            intermediate accumulation of error.  Based on the 'lsum' function
            at http://code.activestate.com/recipes/393090/

             =#
(tmant, texp) = (0, 0)
for x in iterable
(mant, exp_) = math.frexp(x)
(mant, exp_) = (parse(Int, math.ldexp(mant, mant_dig)), exp_ - mant_dig)
if texp > exp_
tmant <<= texp - exp_
texp = exp_
else
mant <<= exp_ - texp
end
tmant += mant
end
tail_ = max((length(bin(abs(tmant))) - 2) - mant_dig, etiny - texp)
if tail_ > 0
h = 1 << (tail_ - 1)
tmant = (tmant ÷ 2*h) + Bool(tmant & h&&tmant & (3*h - 1))
texp += tail_
end
return math.ldexp(tmant, texp)
end

test_values = [([], 0.0), ([0.0], 0.0), ([1e+100, 1.0, -1e+100, 1e-100, 1e+50, -1.0, -1e+50], 1e-100), ([2.0^53, -0.5, -(2.0^-54)], 2.0^53 - 1.0), ([2.0^53, 1.0, 2.0^-100], 2.0^53 + 2.0), ([2.0^53 + 10.0, 1.0, 2.0^-100], 2.0^53 + 12.0), ([2.0^53 - 4.0, 0.5, 2.0^-54], 2.0^53 - 3.0), ([1.0 / n for n in 1:1000], fromhex(Float64, "0x1.df11f45f4e61ap+2")), ([-1.0^n / n for n in 1:1000], fromhex(Float64, "-0x1.62a2af1bd3624p-1")), ([1e+16, 1.0, 1e-16], 1.0000000000000002e+16), ([1e+16 - 2.0, 1.0 - 2.0^-53, -(1e+16 - 2.0), -(1.0 - 2.0^-53)], 0.0), ([(2.0^n - 2.0^(n + 50)) + 2.0^(n + 52) for n in -1074:2:971] + [-(2.0^1022)], fromhex(Float64, "0x1.5555555555555p+970"))]
terms = [1.7^i for i in 0:1000]
append(test_values, ([terms[i + 2] - terms[i + 1] for i in 0:999] + [-(terms[1001])], -(terms[1])))
for (i, (vals, expected)) in enumerate(test_values)
try
actual = xsum(vals)
catch exn
if exn isa OverflowError
fail(self, "test $(i) failed: got OverflowError, expected $(expected) for math.fsum($(vals)0r)")
end
if exn isa ValueError
fail(self, "test $(i) failed: got ValueError, expected $(expected) for math.fsum($(vals)0r)")
end
end
@test (actual == expected)
end
for j in 0:999
vals = repeat([7, 1e+100, -7, -1e+100, -9e-20, 8e-20],10)
s = 0
for i in 0:199
v = gauss(0, random())^7 - s
s += v
push!(vals, v)
end
shuffle(vals)
s = msum(vals)
@test (msum(vals) == xsum(vals))
end
end

function testGcd(self::@like(MathTests))
gcd_ = math.gcd_
@test (gcd_(0, 0) == 0)
@test (gcd_(1, 0) == 1)
@test (gcd_(-1, 0) == 1)
@test (gcd_(0, 1) == 1)
@test (gcd_(0, -1) == 1)
@test (gcd_(7, 1) == 1)
@test (gcd_(7, -1) == 1)
@test (gcd_(-23, 15) == 1)
@test (gcd_(120, 84) == 12)
@test (gcd_(84, -120) == 12)
@test (gcd_(1216342683557601535506311712, 436522681849110124616458784) == 32)
x = 434610456570399902378880679233098819019853229470286994367836600566
y = 1064502245825115327754847244914921553977
for c in (652560, 576559230871654959816130551884856912003141446781646602790216406874)
a = x*c
b = y*c
@test (gcd_(a, b) == c)
@test (gcd_(b, a) == c)
@test (gcd_(-a, b) == c)
@test (gcd_(b, -a) == c)
@test (gcd_(a, -b) == c)
@test (gcd_(-b, a) == c)
@test (gcd_(-a, -b) == c)
@test (gcd_(-b, -a) == c)
end
@test (gcd_() == 0)
@test (gcd_(120) == 120)
@test (gcd_(-120) == 120)
@test (gcd_(120, 84, 102) == 6)
@test (gcd_(120, 1, 84) == 1)
@test_throws
@test_throws
@test_throws
@test_throws
@test (gcd_(MyIndexable(120), MyIndexable(84)) == 12)
end

function testHypot(self::@like(MathTests))
hypot_ = math.hypot_
args = (math.e, math.pi, sqrt(2.0), math.gamma(3.5), sin(2.1))
for i in 0:length(args)
assertAlmostEqual(self, hypot_(args[begin:i]...), sqrt(sum((s^2 for s in args[begin:i]))))
end
@test (hypot_(12.0, 5.0) == 13.0)
@test (hypot_(12, 5) == 13)
@test (hypot_(Decimal(12), Decimal(5)) == 13)
@test (hypot_(Fraction(12, 32), Fraction(5, 32)) == Fraction(13, 32))
@test (hypot_(Bool(1), Bool(0), Bool(1), Bool(1)) == sqrt(3))
@test (hypot_(0.0, 0.0) == 0.0)
@test (hypot_(-10.5) == 10.5)
@test (hypot_() == 0.0)
@test (1.0 == math.copysign(1.0, hypot_(-0.0)))
@test (hypot_(1.5, 1.5, 0.5) == hypot_(1.5, 0.5, 1.5))
@test_throws TypeError do 
hypot_(x = 1)
end
@test_throws TypeError do 
hypot_(1.1, "string", 2.2)
end
int_too_big_for_float = 10^(sys.float_info.max_10_exp + 5)
@test_throws (ValueError, OverflowError) do 
hypot_(1, int_too_big_for_float)
end
@test (hypot_(INF) == INF)
@test (hypot_(0, INF) == INF)
@test (hypot_(10, INF) == INF)
@test (hypot_(-10, INF) == INF)
@test (hypot_(NAN, INF) == INF)
@test (hypot_(INF, NAN) == INF)
@test (hypot_(NINF, NAN) == INF)
@test (hypot_(NAN, NINF) == INF)
@test (hypot_(-INF, INF) == INF)
@test (hypot_(-INF, -INF) == INF)
@test (hypot_(10, -INF) == INF)
@test math.isnan(hypot_(NAN))
@test math.isnan(hypot_(0, NAN))
@test math.isnan(hypot_(NAN, 10))
@test math.isnan(hypot_(10, NAN))
@test math.isnan(hypot_(NAN, NAN))
@test math.isnan(hypot_(NAN))
fourthmax = FLOAT_MAX / 4.0
for n in 0:31
@test math.isclose(hypot_(repeat([fourthmax],n)...), fourthmax*sqrt(n))
end
for exp_ in 0:31
scale = FLOAT_MIN / 2.0^exp_
@test (math.hypot_(4*scale, 3*scale) == 5*scale)
end
end

function testHypotAccuracy(self::@like(MathTests))
hypot_ = math.hypot_
Decimal = decimal.Decimal
high_precision = decimal.Context(prec = 500)
for (hx, hy) in [("0x1.10e89518dca48p+29", "0x1.1970f7565b7efp+30"), ("0x1.10106eb4b44a2p+29", "0x1.ef0596cdc97f8p+29"), ("0x1.459c058e20bb7p+30", "0x1.993ca009b9178p+29"), ("0x1.378371ae67c0cp+30", "0x1.fbe6619854b4cp+29"), ("0x1.f4cd0574fb97ap+29", "0x1.50fe31669340ep+30"), ("0x1.494b2cdd3d446p+29", "0x1.212a5367b4c7cp+29"), ("0x1.f84e649f1e46dp+29", "0x1.1fa56bef8eec4p+30"), ("0x1.2e817edd3d6fap+30", "0x1.eb0814f1e9602p+29"), ("0x1.0d3a6e3d04245p+29", "0x1.32a62fea52352p+30"), ("0x1.888e19611bfc5p+29", "0x1.52b8e70b24353p+29"), ("0x1.538816d48a13fp+29", "0x1.7967c5ca43e16p+29"), ("0x1.57b47b7234530p+29", "0x1.74e2c7040e772p+29"), ("0x1.821b685e9b168p+30", "0x1.677dc1c1e3dc6p+29"), ("0x1.9e8247f67097bp+29", "0x1.24bd2dc4f4baep+29"), ("0x1.b73b59e0cb5f9p+29", "0x1.da899ab784a97p+28"), ("0x1.94a8d2842a7cfp+30", "0x1.326a51d4d8d8ap+30"), ("0x1.e930b9cd99035p+29", "0x1.5a1030e18dff9p+30"), ("0x1.1592bbb0e4690p+29", "0x1.a9c337b33fb9ap+29"), ("0x1.1243a50751fd4p+29", "0x1.a5a10175622d9p+29"), ("0x1.57a8596e74722p+30", "0x1.42d1af9d04da9p+30"), ("0x1.ee7dbd9565899p+29", "0x1.7ab4d6fc6e4b4p+29"), ("0x1.5c6bfbec5c4dcp+30", "0x1.02511184b4970p+30"), ("0x1.59dcebba995cap+30", "0x1.50ca7e7c38854p+29"), ("0x1.768cdd94cf5aap+29", "0x1.9cfdc5571d38ep+29"), ("0x1.dcf137d60262ep+29", "0x1.1101621990b3ep+30"), ("0x1.3a2d006e288b0p+30", "0x1.e9a240914326cp+29"), ("0x1.62a32f7f53c61p+29", "0x1.47eb6cd72684fp+29"), ("0x1.d3bcb60748ef2p+29", "0x1.3f13c4056312cp+30"), ("0x1.282bdb82f17f3p+30", "0x1.640ba4c4eed3ap+30"), ("0x1.89d8c423ea0c6p+29", "0x1.d35dcfe902bc3p+29")]
x = fromhex(Float64, hx)
y = fromhex(Float64, hy)
subTest(self, hx = hx, hy = hy, x = x, y = y) do 
decimal.localcontext(high_precision) do 
z = float(sqrt(Decimal(x)^2 + Decimal(y)^2))
end
@test (hypot_(x, y) == z)
end
end
end

function testDist(self::@like(MathTests))
dist = math.dist
sqrt_ = sqrt(math)
@test (dist((1.0, 2.0, 3.0), (4.0, 2.0, -1.0)) == 5.0)
@test (dist((1, 2, 3), (4, 2, -1)) == 5.0)
for i in 0:8
for j in 0:4
p = tuple((random.uniform(-5, 5) for k in 0:i - 1)...)
q = tuple((random.uniform(-5, 5) for k in 0:i - 1)...)
assertAlmostEqual(self, dist(p, q), sqrt_(sum(((px - qx)^2.0 for (px, qx) in zip(p, q)))))
end
end
@test (dist([1.0, 2.0, 3.0], [4.0, 2.0, -1.0]) == 5.0)
@test (dist((x for x in [1.0, 2.0, 3.0]), (x for x in [4.0, 2.0, -1.0])) == 5.0)
@test (dist((14.0, 1.0), (2.0, -4.0)) == 13.0)
@test (dist((14, 1), (2, -4)) == 13)
@test (dist((D(14), D(1)), (D(2), D(-4))) == D(13))
@test (dist((F(14, 32), F(1, 32)), (F(2, 32), F(-4, 32))) == F(13, 32))
@test (dist((true, true, false, true, false), (true, false, true, true, false)) == sqrt_(2.0))
@test (dist((13.25, 12.5, -3.25), (13.25, 12.5, -3.25)) == 0.0)
@test (dist((), ()) == 0.0)
@test (1.0 == math.copysign(1.0, dist((-0.0,), (0.0,))))
@test (1.0 == math.copysign(1.0, dist((0.0,), (-0.0,))))
@test (dist((1.5, 1.5, 0.5), (0, 0, 0)) == dist((1.5, 0.5, 1.5), (0, 0, 0)))
@test (dist(T((1, 2, 3)), (4, 2, -1)) == 5.0)
@test_throws TypeError do 
dist(p = (1, 2, 3), q = (4, 5, 6))
end
@test_throws TypeError do 
dist((1, 2, 3))
end
@test_throws TypeError do 
dist((1, 2, 3), (4, 5, 6), (7, 8, 9))
end
@test_throws TypeError do 
dist(1, 2)
end
@test_throws TypeError do 
dist((1.1, "string", 2.2), (1, 2, 3))
end
@test_throws ValueError do 
dist((1, 2, 3, 4), (5, 6, 7))
end
@test_throws ValueError do 
dist((1, 2, 3), (4, 5, 6, 7))
end
@test_throws TypeError do 
dist("abc", "xyz")
end
int_too_big_for_float = 10^(sys.float_info.max_10_exp + 5)
@test_throws (ValueError, OverflowError) do 
dist((1, int_too_big_for_float), (2, 3))
end
@test_throws (ValueError, OverflowError) do 
dist((2, 3), (1, int_too_big_for_float))
end
for i in 0:19
(p, q) = (rand(), rand())
@test (dist((p,), (q,)) == abs(p - q))
end
values_ = [NINF, -10.5, -0.0, 0.0, 10.5, INF, NAN]
for p in itertools.product(values_, repeat = 3)
for q in itertools.product(values_, repeat = 3)
diffs = [px - qx for (px, qx) in zip(p, q)]
if any(map(math.isinf, diffs))
@test (dist(p, q) == INF)
elseif any(map(math.isnan, diffs))
@test math.isnan(dist(p, q))
end
end
end
fourthmax = FLOAT_MAX / 4.0
for n in 0:31
p = repeat([(fourthmax,)...],n)
q = repeat([(0.0,)...],n)
@test math.isclose(dist(p, q), fourthmax*sqrt(n))
@test math.isclose(dist(q, p), fourthmax*sqrt(n))
end
for exp_ in 0:31
scale = FLOAT_MIN / 2.0^exp_
p = (4*scale, 3*scale)
q = (0.0, 0.0)
@test (math.dist(p, q) == 5*scale)
@test (math.dist(q, p) == 5*scale)
end
end

function testIsqrt(self::@like(MathTests))
test_values = ([collect(0:999); collect(10^6:10^6 + 999)] + [2^e + i for e in 60:199 for i in -40:39]) + [3^9999, 10^5001]
for value in test_values
subTest(self, value = value) do 
s = math.isqrt(value)
@test self === type_(s)
assertLessEqual(self, s*s, value)
assertLess(self, value, (s + 1)*(s + 1))
end
end
@test_throws ValueError do 
math.isqrt(-1)
end
s = math.isqrt(true)
@test self === type_(s)
@test (s == 1)
s = math.isqrt(false)
@test self === type_(s)
@test (s == 0)
s = math.isqrt(IntegerLike(1729))
@test self === type_(s)
@test (s == 41)
@test_throws ValueError do 
math.isqrt(IntegerLike(-3))
end
bad_values = [3.5, "a string", decimal.Decimal("3.5"), 3.5im, 100.0, -4.0]
for value in bad_values
subTest(self, value = value) do 
@test_throws TypeError do 
math.isqrt(value)
end
end
end
end

function test_lcm(self::@like(MathTests))
lcm_ = math.lcm_
@test (lcm_(0, 0) == 0)
@test (lcm_(1, 0) == 0)
@test (lcm_(-1, 0) == 0)
@test (lcm_(0, 1) == 0)
@test (lcm_(0, -1) == 0)
@test (lcm_(7, 1) == 7)
@test (lcm_(7, -1) == 7)
@test (lcm_(-23, 15) == 345)
@test (lcm_(120, 84) == 840)
@test (lcm_(84, -120) == 840)
@test (lcm_(1216342683557601535506311712, 436522681849110124616458784) == 16592536571065866494401400422922201534178938447014944)
x = 43461045657039990237
y = 10645022458251153277
for c in (652560, 57655923087165495981)
a = x*c
b = y*c
d = x*y*c
@test (lcm_(a, b) == d)
@test (lcm_(b, a) == d)
@test (lcm_(-a, b) == d)
@test (lcm_(b, -a) == d)
@test (lcm_(a, -b) == d)
@test (lcm_(-b, a) == d)
@test (lcm_(-a, -b) == d)
@test (lcm_(-b, -a) == d)
end
@test (lcm_() == 1)
@test (lcm_(120) == 120)
@test (lcm_(-120) == 120)
@test (lcm_(120, 84, 102) == 14280)
@test (lcm_(120, 0, 84) == 0)
@test_throws
@test_throws
@test_throws
@test_throws
@test (lcm_(MyIndexable(120), MyIndexable(84)) == 840)
end

function testLdexp(self::@like(MathTests))
@test_throws
ftest(self, "ldexp(0,1)", math.ldexp(0, 1), 0)
ftest(self, "ldexp(1,1)", math.ldexp(1, 1), 2)
ftest(self, "ldexp(1,-1)", math.ldexp(1, -1), 0.5)
ftest(self, "ldexp(-1,1)", math.ldexp(-1, 1), -2)
@test_throws
@test_throws
@test (math.ldexp(1.0, -1000000) == 0.0)
@test (math.ldexp(-1.0, -1000000) == -0.0)
@test (math.ldexp(INF, 30) == INF)
@test (math.ldexp(NINF, -213) == NINF)
@test math.isnan(math.ldexp(NAN, 0))
for n in [10^5, 10^10, 10^20, 10^40]
@test (math.ldexp(INF, -n) == INF)
@test (math.ldexp(NINF, -n) == NINF)
@test (math.ldexp(1.0, -n) == 0.0)
@test (math.ldexp(-1.0, -n) == -0.0)
@test (math.ldexp(0.0, -n) == 0.0)
@test (math.ldexp(-0.0, -n) == -0.0)
@test math.isnan(math.ldexp(NAN, -n))
@test_throws
@test_throws
@test (math.ldexp(0.0, n) == 0.0)
@test (math.ldexp(-0.0, n) == -0.0)
@test (math.ldexp(INF, n) == INF)
@test (math.ldexp(NINF, n) == NINF)
@test math.isnan(math.ldexp(NAN, n))
end
end

function testLog(self::@like(MathTests))
@test_throws
ftest(self, "log(1/e)", math.log(1 / math.e), -1)
ftest(self, "log(1)", math.log(1), 0)
ftest(self, "log(e)", math.log(math.e), 1)
ftest(self, "log(32,2)", math.log(32, 2), 5)
ftest(self, "log(10**40, 10)", math.log(10^40, 10), 40)
ftest(self, "log(10**40, 10**20)", math.log(10^40, 10^20), 2)
ftest(self, "log(10**1000)", math.log(10^1000), 2302.5850929940457)
@test_throws
@test_throws
@test_throws
@test (math.log(INF) == INF)
@test math.isnan(math.log(NAN))
end

function testLog1p(self::@like(MathTests))
@test_throws
for n in [2, 2^90, 2^300]
assertAlmostEqual(self, math.log1p(n), math.log1p(float(n)))
end
@test_throws
@test (math.log1p(INF) == INF)
end

function testLog2(self::@like(MathTests))
@test_throws
@test (math.log2(1) == 0.0)
@test (math.log2(2) == 1.0)
@test (math.log2(4) == 2.0)
@test (math.log2(2^1023) == 1023.0)
@test (math.log2(2^1024) == 1024.0)
@test (math.log2(2^2000) == 2000.0)
@test_throws
@test_throws
@test math.isnan(math.log2(NAN))
end

function testLog2Exact(self::@like(MathTests))
actual = [math.log2(math.ldexp(1.0, n)) for n in -1074:1023]
expected = [float(n) for n in -1074:1023]
@test (actual == expected)
end

function testLog10(self::@like(MathTests))
@test_throws
ftest(self, "log10(0.1)", math.log10(0.1), -1)
ftest(self, "log10(1)", math.log10(1), 0)
ftest(self, "log10(10)", math.log10(10), 1)
ftest(self, "log10(10**1000)", math.log10(10^1000), 1000.0)
@test_throws
@test_throws
@test_throws
@test (math.log(INF) == INF)
@test math.isnan(math.log10(NAN))
end

function testModf(self::@like(MathTests))
@test_throws
function testmodf(name::@like(MathTests), result, expected)
((v1, v2), (e1, e2)) = (result, expected)
if abs(v1 - e1) > eps_||abs(v2 - e2)
fail(self, "$(name) returned $(result), expected $(expected)")
end
end

testmodf("modf(1.5)", math.modf(1.5), (0.5, 1.0))
testmodf("modf(-1.5)", math.modf(-1.5), (-0.5, -1.0))
@test (math.modf(INF) == (0.0, INF))
@test (math.modf(NINF) == (-0.0, NINF))
modf_nan = math.modf(NAN)
@test math.isnan(modf_nan[1])
@test math.isnan(modf_nan[2])
end

function testPow(self::@like(MathTests))
@test_throws
ftest(self, "pow(0,1)", 0^(1), 0)
ftest(self, "pow(1,0)", 1^(0), 1)
ftest(self, "pow(2,1)", 2^(1), 2)
ftest(self, "pow(2,-1)", 2^(-1), 0.5)
@test (INF^(1) == INF)
@test (NINF^(1) == NINF)
@test (1^(INF) == 1.0)
@test (1^(NINF) == 1.0)
@test math.isnan(NAN^(1))
@test math.isnan(2^(NAN))
@test math.isnan(0^(NAN))
@test (1^(NAN) == 1)
@test (0.0^(INF) == 0.0)
@test (0.0^(3.0) == 0.0)
@test (0.0^(2.3) == 0.0)
@test (0.0^(2.0) == 0.0)
@test (0.0^(0.0) == 1.0)
@test (0.0^(-0.0) == 1.0)
@test_throws
@test_throws
@test_throws
@test_throws
@test math.isnan(0.0^(NAN))
@test (INF^(INF) == INF)
@test (INF^(3.0) == INF)
@test (INF^(2.3) == INF)
@test (INF^(2.0) == INF)
@test (INF^(0.0) == 1.0)
@test (INF^(-0.0) == 1.0)
@test (INF^(-2.0) == 0.0)
@test (INF^(-2.3) == 0.0)
@test (INF^(-3.0) == 0.0)
@test (INF^(NINF) == 0.0)
@test math.isnan(INF^(NAN))
@test (-0.0^(INF) == 0.0)
@test (-0.0^(3.0) == -0.0)
@test (-0.0^(2.3) == 0.0)
@test (-0.0^(2.0) == 0.0)
@test (-0.0^(0.0) == 1.0)
@test (-0.0^(-0.0) == 1.0)
@test_throws
@test_throws
@test_throws
@test_throws
@test math.isnan(-0.0^(NAN))
@test (NINF^(INF) == INF)
@test (NINF^(3.0) == NINF)
@test (NINF^(2.3) == INF)
@test (NINF^(2.0) == INF)
@test (NINF^(0.0) == 1.0)
@test (NINF^(-0.0) == 1.0)
@test (NINF^(-2.0) == 0.0)
@test (NINF^(-2.3) == 0.0)
@test (NINF^(-3.0) == -0.0)
@test (NINF^(NINF) == 0.0)
@test math.isnan(NINF^(NAN))
@test (-1.0^(INF) == 1.0)
@test (-1.0^(3.0) == -1.0)
@test_throws
@test (-1.0^(2.0) == 1.0)
@test (-1.0^(0.0) == 1.0)
@test (-1.0^(-0.0) == 1.0)
@test (-1.0^(-2.0) == 1.0)
@test_throws
@test (-1.0^(-3.0) == -1.0)
@test (-1.0^(NINF) == 1.0)
@test math.isnan(-1.0^(NAN))
@test (1.0^(INF) == 1.0)
@test (1.0^(3.0) == 1.0)
@test (1.0^(2.3) == 1.0)
@test (1.0^(2.0) == 1.0)
@test (1.0^(0.0) == 1.0)
@test (1.0^(-0.0) == 1.0)
@test (1.0^(-2.0) == 1.0)
@test (1.0^(-2.3) == 1.0)
@test (1.0^(-3.0) == 1.0)
@test (1.0^(NINF) == 1.0)
@test (1.0^(NAN) == 1.0)
@test (2.3^(0.0) == 1.0)
@test (-2.3^(0.0) == 1.0)
@test (NAN^(0.0) == 1.0)
@test (2.3^(-0.0) == 1.0)
@test (-2.3^(-0.0) == 1.0)
@test (NAN^(-0.0) == 1.0)
@test_throws
@test_throws
@test (1.9^(NINF) == 0.0)
@test (1.1^(NINF) == 0.0)
@test (0.9^(NINF) == INF)
@test (0.1^(NINF) == INF)
@test (-0.1^(NINF) == INF)
@test (-0.9^(NINF) == INF)
@test (-1.1^(NINF) == 0.0)
@test (-1.9^(NINF) == 0.0)
@test (1.9^(INF) == INF)
@test (1.1^(INF) == INF)
@test (0.9^(INF) == 0.0)
@test (0.1^(INF) == 0.0)
@test (-0.1^(INF) == 0.0)
@test (-0.9^(INF) == 0.0)
@test (-1.1^(INF) == INF)
@test (-1.9^(INF) == INF)
ftest(self, "(-2.)**3.", -2.0^(3.0), -8.0)
ftest(self, "(-2.)**2.", -2.0^(2.0), 4.0)
ftest(self, "(-2.)**1.", -2.0^(1.0), -2.0)
ftest(self, "(-2.)**0.", -2.0^(0.0), 1.0)
ftest(self, "(-2.)**-0.", -2.0^(-0.0), 1.0)
ftest(self, "(-2.)**-1.", -2.0^(-1.0), -0.5)
ftest(self, "(-2.)**-2.", -2.0^(-2.0), 0.25)
ftest(self, "(-2.)**-3.", -2.0^(-3.0), -0.125)
@test_throws
@test_throws
end

function testRadians(self::@like(MathTests))
@test_throws
ftest(self, "radians(180)", deg2rad(180), math.pi)
ftest(self, "radians(90)", deg2rad(90), math.pi / 2)
ftest(self, "radians(-45)", deg2rad(-45), -(math.pi) / 4)
ftest(self, "radians(0)", deg2rad(0), 0)
end

function testRemainder(self::@like(MathTests))
function validate_spec(x::@like(MathTests), y, r)
#= 
            Check that r matches remainder(x, y) according to the IEEE 754
            specification. Assumes that x, y and r are finite and y is nonzero.
             =#
(fx, fy, fr) = (Fraction(x), Fraction(y), Fraction(r))
assertLessEqual(self, abs(fr), abs(fy / 2))
n = (fx - fr) / fy
@test (n == parse(Int, n))
if abs(fr) == abs(fy / 2)
@test (n / 2 == parse(Int, n / 2))
end
end

testcases = ["-4.0 1 -0.0", "-3.8 1  0.8", "-3.0 1 -0.0", "-2.8 1 -0.8", "-2.0 1 -0.0", "-1.8 1  0.8", "-1.0 1 -0.0", "-0.8 1 -0.8", "-0.0 1 -0.0", " 0.0 1  0.0", " 0.8 1  0.8", " 1.0 1  0.0", " 1.8 1 -0.8", " 2.0 1  0.0", " 2.8 1  0.8", " 3.0 1  0.0", " 3.8 1 -0.8", " 4.0 1  0.0", "0x0.0p+0 0x1.921fb54442d18p+2 0x0.0p+0", "0x1.921fb54442d18p+0 0x1.921fb54442d18p+2  0x1.921fb54442d18p+0", "0x1.921fb54442d17p+1 0x1.921fb54442d18p+2  0x1.921fb54442d17p+1", "0x1.921fb54442d18p+1 0x1.921fb54442d18p+2  0x1.921fb54442d18p+1", "0x1.921fb54442d19p+1 0x1.921fb54442d18p+2 -0x1.921fb54442d17p+1", "0x1.921fb54442d17p+2 0x1.921fb54442d18p+2 -0x0.0000000000001p+2", "0x1.921fb54442d18p+2 0x1.921fb54442d18p+2  0x0p0", "0x1.921fb54442d19p+2 0x1.921fb54442d18p+2  0x0.0000000000001p+2", "0x1.2d97c7f3321d1p+3 0x1.921fb54442d18p+2  0x1.921fb54442d14p+1", "0x1.2d97c7f3321d2p+3 0x1.921fb54442d18p+2 -0x1.921fb54442d18p+1", "0x1.2d97c7f3321d3p+3 0x1.921fb54442d18p+2 -0x1.921fb54442d14p+1", "0x1.921fb54442d17p+3 0x1.921fb54442d18p+2 -0x0.0000000000001p+3", "0x1.921fb54442d18p+3 0x1.921fb54442d18p+2  0x0p0", "0x1.921fb54442d19p+3 0x1.921fb54442d18p+2  0x0.0000000000001p+3", "0x1.f6a7a2955385dp+3 0x1.921fb54442d18p+2  0x1.921fb54442d14p+1", "0x1.f6a7a2955385ep+3 0x1.921fb54442d18p+2  0x1.921fb54442d18p+1", "0x1.f6a7a2955385fp+3 0x1.921fb54442d18p+2 -0x1.921fb54442d14p+1", "0x1.1475cc9eedf00p+5 0x1.921fb54442d18p+2  0x1.921fb54442d10p+1", "0x1.1475cc9eedf01p+5 0x1.921fb54442d18p+2 -0x1.921fb54442d10p+1", " 1  0.c  0.4", "-1  0.c -0.4", " 1 -0.c  0.4", "-1 -0.c -0.4", " 1.4  0.c -0.4", "-1.4  0.c  0.4", " 1.4 -0.c -0.4", "-1.4 -0.c  0.4", "0x1.dp+1023 0x1.4p+1023  0x0.9p+1023", "0x1.ep+1023 0x1.4p+1023 -0x0.ap+1023", "0x1.fp+1023 0x1.4p+1023 -0x0.9p+1023"]
for case in testcases
subTest(self, case = case) do 
(x_hex, y_hex, expected_hex) = split(case)
x = fromhex(Float64, x_hex)
y = fromhex(Float64, y_hex)
expected = fromhex(Float64, expected_hex)
validate_spec(x, y, expected)
actual = math.remainder(x, y)
@test (hex(actual) == hex(expected))
end
end
tiny = fromhex(Float64, "1p-1074")
for n in -25:24
if n == 0
continue;
end
y = n*tiny
for m in 0:99
x = m*tiny
actual = math.remainder(x, y)
validate_spec(x, y, actual)
actual = math.remainder(-x, y)
validate_spec(-x, y, actual)
end
end
for value in [NAN, 0.0, -0.0, 2.0, -2.3, NINF, INF]
assertIsNaN(self, math.remainder(NAN, value))
assertIsNaN(self, math.remainder(value, NAN))
end
for value in [-2.3, -0.0, 0.0, 2.3]
@test (math.remainder(value, INF) == value)
@test (math.remainder(value, NINF) == value)
end
for value in [NINF, -2.3, -0.0, 0.0, 2.3, INF]
@test_throws ValueError do 
math.remainder(INF, value)
end
@test_throws ValueError do 
math.remainder(NINF, value)
end
@test_throws ValueError do 
math.remainder(value, 0.0)
end
@test_throws ValueError do 
math.remainder(value, -0.0)
end
end
end

function testSin(self::@like(MathTests))
@test_throws
ftest(self, "sin(0)", sin(0), 0)
ftest(self, "sin(pi/2)", sin(math.pi / 2), 1)
ftest(self, "sin(-pi/2)", sin(-(math.pi) / 2), -1)
try
@test math.isnan(sin(INF))
@test math.isnan(sin(NINF))
catch exn
if exn isa ValueError
@test_throws
@test_throws
end
end
@test math.isnan(sin(NAN))
end

function testSinh(self::@like(MathTests))
@test_throws
ftest(self, "sinh(0)", math.sinh(0), 0)
ftest(self, "sinh(1)**2-cosh(1)**2", math.sinh(1)^2 - math.cosh(1)^2, -1)
ftest(self, "sinh(1)+sinh(-1)", math.sinh(1) + math.sinh(-1), 0)
@test (math.sinh(INF) == INF)
@test (math.sinh(NINF) == NINF)
@test math.isnan(math.sinh(NAN))
end

function testSqrt(self::@like(MathTests))
@test_throws
ftest(self, "sqrt(0)", sqrt(0), 0)
ftest(self, "sqrt(1)", sqrt(1), 1)
ftest(self, "sqrt(4)", sqrt(4), 2)
@test (sqrt(INF) == INF)
@test_throws
@test_throws
@test math.isnan(sqrt(NAN))
end

function testTan(self::@like(MathTests))
@test_throws
ftest(self, "tan(0)", tan(0), 0)
ftest(self, "tan(pi/4)", tan(math.pi / 4), 1)
ftest(self, "tan(-pi/4)", tan(-(math.pi) / 4), -1)
try
@test math.isnan(tan(INF))
@test math.isnan(tan(NINF))
catch exn
@test_throws
@test_throws
end
@test math.isnan(tan(NAN))
end

function testTanh(self::@like(MathTests))
@test_throws
ftest(self, "tanh(0)", math.tanh(0), 0)
ftest(self, "tanh(1)+tanh(-1)", math.tanh(1) + math.tanh(-1), 0, abs_tol = math.ulp(1))
ftest(self, "tanh(inf)", math.tanh(INF), 1)
ftest(self, "tanh(-inf)", math.tanh(NINF), -1)
@test math.isnan(math.tanh(NAN))
end

function testTanhSign(self::@like(MathTests))
@test (math.tanh(-0.0) == -0.0)
@test (math.copysign(1.0, math.tanh(-0.0)) == math.copysign(1.0, -0.0))
end

function test_trunc(self::@like(MathTests))
@test (trunc(1) == 1)
@test (trunc(-1) == -1)
@test (type_(trunc(1)) == Int64)
@test (type_(trunc(1.5)) == Int64)
@test (trunc(1.5) == 1)
@test (trunc(-1.5) == -1)
@test (trunc(1.999999) == 1)
@test (trunc(-1.999999) == -1)
@test (trunc(-0.999999) == -0)
@test (trunc(-100.999) == -100)
@test (trunc(TestTrunc()) == 23)
@test (trunc(FloatTrunc()) == 23)
@test_throws
@test_throws
@test_throws
@test_throws
end

function testIsfinite(self::@like(MathTests))
@test math.isfinite(0.0)
@test math.isfinite(-0.0)
@test math.isfinite(1.0)
@test math.isfinite(-1.0)
@test !(math.isfinite(parse(Float64, "nan")))
@test !(math.isfinite(parse(Float64, "inf")))
@test !(math.isfinite(parse(Float64, "-inf")))
end

function testIsnan(self::@like(MathTests))
@test math.isnan(parse(Float64, "nan"))
@test math.isnan(parse(Float64, "-nan"))
@test math.isnan(parse(Float64, "inf")*0.0)
@test !(math.isnan(parse(Float64, "inf")))
@test !(math.isnan(0.0))
@test !(math.isnan(1.0))
end

function testIsinf(self::@like(MathTests))
@test math.isinf(parse(Float64, "inf"))
@test math.isinf(parse(Float64, "-inf"))
@test math.isinf(inf)
@test math.isinf(-inf)
@test !(math.isinf(parse(Float64, "nan")))
@test !(math.isinf(0.0))
@test !(math.isinf(1.0))
end

function test_nan_constant(self::@like(MathTests))
@test math.isnan(math.nan)
end

function test_inf_constant(self::@like(MathTests))
@test math.isinf(math.inf)
assertGreater(self, math.inf, 0.0)
@test (math.inf == parse(Float64, "inf"))
@test (-(math.inf) == parse(Float64, "-inf"))
end

function test_exceptions(self::@like(MathTests))
try
x = math.exp(-1000000000)
catch exn
fail(self, "underflowing exp() should not have raised an exception")
end
if x != 0
fail(self, "underflowing exp() should have returned 0")
end
try
x = math.exp(1000000000)
catch exn
if exn isa OverflowError
#= pass =#
end
end
try
x = sqrt(-1.0)
catch exn
if exn isa ValueError
#= pass =#
end
end
end

function test_testfile(self::@like(MathTests))
SKIP_ON_TIGER = Set(["tan0064"])
osx_version = nothing
if sys.platform == "darwin"
version_txt = platform.mac_ver()[1]
try
osx_version = tuple(map(Int64, split(version_txt, ".")))
catch exn
if exn isa ValueError
#= pass =#
end
end
end
fail_fmt = "{}: {}({!r}): {}"
failures = []
for (id, fn, ar, ai, er, ei, flags) in parse_testfile(test_file)
if ai != 0.0||ei != 0.0
continue;
end
if fn ∈ ["rect", "polar"]
continue;
end
if osx_version !== nothing&&osx_version < (10, 5)
if id ∈ SKIP_ON_TIGER
continue;
end
end
func = getfield(math, :fn)
if "invalid" ∈ flags||"divide-by-zero" ∈ flags
er = "ValueError"
elseif "overflow" ∈ flags
er = "OverflowError"
end
try
result = func(ar)
catch exn
if exn isa ValueError
result = "ValueError"
end
if exn isa OverflowError
result = "OverflowError"
end
end
(ulp_tol, abs_tol) = (5, 0.0)
failure = result_check(er, result, ulp_tol, abs_tol)
if failure === nothing
continue;
end
msg = fail_fmt
push!(failures, msg)
end
if failures
fail(self, "Failures in test_testfile:\n  " + join("\n  ", failures))
end
end

function test_mtestfile(self::@like(MathTests))
fail_fmt = "{}: {}({!r}): {}"
failures = []
for (id, fn, arg, expected, flags) in parse_mtestfile(math_testcases)
func = getfield(math, :fn)
if "invalid" ∈ flags||"divide-by-zero" ∈ flags
expected = "ValueError"
elseif "overflow" ∈ flags
expected = "OverflowError"
end
try
got = func(arg)
catch exn
if exn isa ValueError
got = "ValueError"
end
if exn isa OverflowError
got = "OverflowError"
end
end
(ulp_tol, abs_tol) = (5, 0.0)
if fn == "gamma"
ulp_tol = 20
elseif fn == "lgamma"
abs_tol = 1e-15
elseif fn == "erfc"&&arg >= 0.0
if arg < 1.0
ulp_tol = 10
elseif arg < 10.0
ulp_tol = 100
else
ulp_tol = 1000
end
end
failure = result_check(expected, got, ulp_tol, abs_tol)
if failure === nothing
continue;
end
msg = fail_fmt
push!(failures, msg)
end
if failures
fail(self, "Failures in test_mtestfile:\n  " + join("\n  ", failures))
end
end

function test_prod(self::@like(MathTests))
prod_ = math.prod_
@test (prod_([]) == 1)
@test (prod_([], start = 5) == 5)
@test (prod_(collect(2:7)) == 5040)
@test (prod_((x for x in collect(2:7))) == 5040)
@test (prod_(1:9, start = 10) == 3628800)
@test (prod_([1, 2, 3, 4, 5]) == 120)
@test (prod_([1.0, 2.0, 3.0, 4.0, 5.0]) == 120.0)
@test (prod_([1, 2, 3, 4.0, 5.0]) == 120.0)
@test (prod_([1.0, 2.0, 3.0, 4, 5]) == 120.0)
@test (prod_([1, 1, 2^32, 1, 1]) == 2^32)
@test (prod_([1.0, 1.0, 2^32, 1, 1]) == float(2^32))
@test_throws
@test_throws
@test_throws
@test_throws
@test_throws
values_ = [Vector{UInt8}(b"a"), Vector{UInt8}(b"b")]
@test_throws
@test_throws
@test_throws
@test_throws
@test_throws
@test (prod_([2, 3], start = "ab") == "abababababab")
@test (prod_([2, 3], start = [1, 2]) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2])
@test (prod_([], start = Dict{int, int}(2 => 3)) == Dict{int, int}(2 => 3))
@test_throws TypeError do 
prod_([10, 20], 1)
end
@test (prod_([0, 1, 2, 3]) == 0)
@test (prod_([1, 0, 2, 3]) == 0)
@test (prod_([1, 2, 3, 0]) == 0)
function _naive_prod(iterable::@like(MathTests), start = 1)
for elem in iterable
start *= elem
end
return start
end

iterable = 1:9999
@test (prod_(iterable) == _naive_prod(iterable))
iterable = -10000:0
@test (prod_(iterable) == _naive_prod(iterable))
iterable = -1000:999
@test (prod_(iterable) == 0)
iterable = [float(x) for x in 1:999]
@test (prod_(iterable) == _naive_prod(iterable))
iterable = [float(x) for x in -1000:0]
@test (prod_(iterable) == _naive_prod(iterable))
iterable = [float(x) for x in -1000:999]
assertIsNaN(self, prod_(iterable))
assertIsNaN(self, prod_([1, 2, 3, parse(Float64, "nan"), 2, 3]))
assertIsNaN(self, prod_([1, 0, parse(Float64, "nan"), 2, 3]))
assertIsNaN(self, prod_([1, parse(Float64, "nan"), 0, 3]))
assertIsNaN(self, prod_([1, parse(Float64, "inf"), parse(Float64, "nan"), 3]))
assertIsNaN(self, prod_([1, parse(Float64, "-inf"), parse(Float64, "nan"), 3]))
assertIsNaN(self, prod_([1, parse(Float64, "nan"), parse(Float64, "inf"), 3]))
assertIsNaN(self, prod_([1, parse(Float64, "nan"), parse(Float64, "-inf"), 3]))
@test (prod_([1, 2, 3, parse(Float64, "inf"), -3, 4]) == parse(Float64, "-inf"))
@test (prod_([1, 2, 3, parse(Float64, "-inf"), -3, 4]) == parse(Float64, "inf"))
assertIsNaN(self, prod_([1, 2, 0, parse(Float64, "inf"), -3, 4]))
assertIsNaN(self, prod_([1, 2, 0, parse(Float64, "-inf"), -3, 4]))
assertIsNaN(self, prod_([1, 2, 3, parse(Float64, "inf"), -3, 0, 3]))
assertIsNaN(self, prod_([1, 2, 3, parse(Float64, "-inf"), -3, 0, 2]))
@test (type_(prod_([1, 2, 3, 4, 5, 6])) == Int64)
@test (type_(prod_([1, 2.0, 3, 4, 5, 6])) == Float64)
@test (type_(prod_(1:9999)) == Int64)
@test (type_(prod_(1:9999, start = 1.0)) == Float64)
@test (type_(prod_([1, decimal.Decimal(2.0), 3, 4, 5, 6])) == decimal.Decimal)
end

function testPerm(self::@like(MathTests))
perm = math.perm
factorial_ = math.factorial_
for n in 0:99
for k in 0:n
@test (perm(n, k) == factorial_(n) ÷ factorial_(n - k))
end
end
for n in 1:99
for k in 1:n - 1
@test (perm(n, k) == perm(n - 1, k - 1)*k + perm(n - 1, k))
end
end
for n in 1:99
@test (perm(n, 0) == 1)
@test (perm(n, 1) == n)
@test (perm(n, n) == factorial_(n))
end
for n in 0:19
@test (perm(n) == factorial_(n))
@test (perm(n, nothing) == factorial_(n))
end
@test_throws
@test_throws
@test_throws
@test_throws
@test_throws
@test_throws
@test_throws
@test_throws
@test_throws
@test_throws
@test_throws
@test_throws
@test_throws
@test (perm(1, 2) == 0)
@test (perm(1, 2^1000) == 0)
n = 2^1000
@test (perm(n, 0) == 1)
@test (perm(n, 1) == n)
@test (perm(n, 2) == n*(n - 1))
if support.check_impl_detail(cpython = true)
@test_throws
end
for (n, k) in ((true, true), (true, false), (false, false))
@test (perm(n, k) == 1)
@test self === type_(perm(n, k))
end
@test (perm(IntSubclass(5), IntSubclass(2)) == 20)
@test (perm(MyIndexable(5), MyIndexable(2)) == 20)
for k in 0:2
@test self === type_(perm(IntSubclass(5), IntSubclass(k)))
@test self === type_(perm(MyIndexable(5), MyIndexable(k)))
end
end

function testComb(self::@like(MathTests))
comb = math.comb
factorial_ = math.factorial_
for n in 0:99
for k in 0:n
@test (comb(n, k) == factorial_(n) ÷ factorial_(k)*factorial_(n - k))
end
end
for n in 1:99
for k in 1:n - 1
@test (comb(n, k) == comb(n - 1, k - 1) + comb(n - 1, k))
end
end
for n in 0:99
@test (comb(n, 0) == 1)
@test (comb(n, n) == 1)
end
for n in 1:99
@test (comb(n, 1) == n)
@test (comb(n, n - 1) == n)
end
for n in 0:99
for k in 0:n ÷ 2
@test (comb(n, k) == comb(n, n - k))
end
end
@test_throws
@test_throws
@test_throws
@test_throws
@test_throws
@test_throws
@test_throws
@test_throws
@test_throws
@test_throws
@test_throws
@test_throws
@test_throws
@test (comb(1, 2) == 0)
@test (comb(1, 2^1000) == 0)
n = 2^1000
@test (comb(n, 0) == 1)
@test (comb(n, 1) == n)
@test (comb(n, 2) == n*(n - 1) ÷ 2)
@test (comb(n, n) == 1)
@test (comb(n, n - 1) == n)
@test (comb(n, n - 2) == n*(n - 1) ÷ 2)
if support.check_impl_detail(cpython = true)
@test_throws
end
for (n, k) in ((true, true), (true, false), (false, false))
@test (comb(n, k) == 1)
@test self === type_(comb(n, k))
end
@test (comb(IntSubclass(5), IntSubclass(2)) == 10)
@test (comb(MyIndexable(5), MyIndexable(2)) == 10)
for k in 0:2
@test self === type_(comb(IntSubclass(5), IntSubclass(k)))
@test self === type_(comb(MyIndexable(5), MyIndexable(k)))
end
end

function test_nextafter(self::@like(MathTests))
@test (math.nextafter(4503599627370496.0, -INF) == 4503599627370495.5)
@test (math.nextafter(4503599627370496.0, INF) == 4503599627370497.0)
@test (math.nextafter(9.223372036854776e+18, 0.0) == 9.223372036854775e+18)
@test (math.nextafter(-9.223372036854776e+18, 0.0) == -9.223372036854775e+18)
@test (math.nextafter(1.0, -INF) == fromhex(Float64, "0x1.fffffffffffffp-1"))
@test (math.nextafter(1.0, INF) == fromhex(Float64, "0x1.0000000000001p+0"))
@test (math.nextafter(2.0, 2.0) == 2.0)
assertEqualSign(self, math.nextafter(-0.0, +0.0), +0.0)
assertEqualSign(self, math.nextafter(+0.0, -0.0), -0.0)
smallest_subnormal = sys.float_info.min*sys.float_info.epsilon
@test (math.nextafter(+0.0, INF) == smallest_subnormal)
@test (math.nextafter(-0.0, INF) == smallest_subnormal)
@test (math.nextafter(+0.0, -INF) == -smallest_subnormal)
@test (math.nextafter(-0.0, -INF) == -smallest_subnormal)
assertEqualSign(self, math.nextafter(smallest_subnormal, +0.0), +0.0)
assertEqualSign(self, math.nextafter(-smallest_subnormal, +0.0), -0.0)
assertEqualSign(self, math.nextafter(smallest_subnormal, -0.0), +0.0)
assertEqualSign(self, math.nextafter(-smallest_subnormal, -0.0), -0.0)
largest_normal = sys.float_info.max
@test (math.nextafter(INF, 0.0) == largest_normal)
@test (math.nextafter(-INF, 0.0) == -largest_normal)
@test (math.nextafter(largest_normal, INF) == INF)
@test (math.nextafter(-largest_normal, -INF) == -INF)
assertIsNaN(self, math.nextafter(NAN, 1.0))
assertIsNaN(self, math.nextafter(1.0, NAN))
assertIsNaN(self, math.nextafter(NAN, NAN))
end

function test_ulp(self::@like(MathTests))
@test (math.ulp(1.0) == sys.float_info.epsilon)
@test (math.ulp(2^52) == 1.0)
@test (math.ulp(2^53) == 2.0)
@test (math.ulp(2^64) == 4096.0)
@test (math.ulp(0.0) == sys.float_info.min*sys.float_info.epsilon)
@test (math.ulp(FLOAT_MAX) == FLOAT_MAX - math.nextafter(FLOAT_MAX, -INF))
@test (math.ulp(INF) == INF)
assertIsNaN(self, math.ulp(math.nan))
for x in (0.0, 1.0, 2^52, 2^64, INF)
subTest(self, x = x) do 
@test (math.ulp(-x) == math.ulp(x))
end
end
end

function test_issue39871(self::@like(MathTests))
for func in (math.atan2, math.copysign, math.remainder)
y = F()
@test_throws TypeError do 
func("not a number", y)
end
@test !((hasfield(typeof(y), :converted) ? 
                getfield(y, :converted) : false))
end
end

function assertIsNaN(self::@like(MathTests), value)
if !math.isnan(value)
fail(self, format("Expected a NaN, got {!r}.", value))
end
end

function assertEqualSign(self::@like(MathTests), x, y)
#= Similar to assertEqual(), but compare also the sign with copysign().

        Function useful to compare signed zeros.
         =#
@test (x == y)
@test (math.copysign(1.0, x) == math.copysign(1.0, y))
end


@oodef mutable struct IsCloseTests <: unittest.TestCase
                    
                    isclose
                    
function new(isclose = math.isclose)
isclose = isclose
new(isclose)
end

                end
                function assertIsClose(self::@like(IsCloseTests), a, b, args...)
@test isclose(self, a, b, args..., None = kwargs)
end

function assertIsNotClose(self::@like(IsCloseTests), a, b, args...)
@test !(isclose(self, a, b, args..., None = kwargs))
end

function assertAllClose(self::@like(IsCloseTests), examples, args...)
for (a, b) in examples
assertIsClose(self, a, b, None = kwargs)
end
end

function assertAllNotClose(self::@like(IsCloseTests), examples, args...)
for (a, b) in examples
assertIsNotClose(self, a, b, None = kwargs)
end
end

function test_negative_tolerances(self::@like(IsCloseTests))
@test_throws ValueError do 
assertIsClose(self, 1, 1, rel_tol = -1e-100)
end
@test_throws ValueError do 
assertIsClose(self, 1, 1, rel_tol = 1e-100, abs_tol = -10000000000.0)
end
end

function test_identical(self::@like(IsCloseTests))
identical_examples = [(2.0, 2.0), (1e+199, 1e+199), (1.123e-300, 1.123e-300), (12345, 12345.0), (0.0, -0.0), (345678, 345678)]
assertAllClose(self, identical_examples, rel_tol = 0.0, abs_tol = 0.0)
end

function test_eight_decimal_places(self::@like(IsCloseTests))
eight_decimal_places_examples = [(100000000.0, 100000000.0 + 1), (-1e-08, -1.000000009e-08), (1.12345678, 1.12345679)]
assertAllClose(self, eight_decimal_places_examples, rel_tol = 1e-08)
assertAllNotClose(self, eight_decimal_places_examples, rel_tol = 1e-09)
end

function test_near_zero(self::@like(IsCloseTests))
near_zero_examples = [(1e-09, 0.0), (-1e-09, 0.0), (-1e-150, 0.0)]
assertAllNotClose(self, near_zero_examples, rel_tol = 0.9)
assertAllClose(self, near_zero_examples, abs_tol = 1e-08)
end

function test_identical_infinite(self::@like(IsCloseTests))
assertIsClose(self, INF, INF)
assertIsClose(self, INF, INF, abs_tol = 0.0)
assertIsClose(self, NINF, NINF)
assertIsClose(self, NINF, NINF, abs_tol = 0.0)
end

function test_inf_ninf_nan(self::@like(IsCloseTests))
not_close_examples = [(NAN, NAN), (NAN, 1e-100), (1e-100, NAN), (INF, NAN), (NAN, INF), (INF, NINF), (INF, 1.0), (1.0, INF), (INF, 1e+308), (1e+308, INF)]
assertAllNotClose(self, not_close_examples, abs_tol = 0.999999999999999)
end

function test_zero_tolerance(self::@like(IsCloseTests))
zero_tolerance_close_examples = [(1.0, 1.0), (-3.4, -3.4), (-1e-300, -1e-300)]
assertAllClose(self, zero_tolerance_close_examples, rel_tol = 0.0)
zero_tolerance_not_close_examples = [(1.0, 1.000000000000001), (0.99999999999999, 1.0), (1e+200, 9.99999999999999e+199)]
assertAllNotClose(self, zero_tolerance_not_close_examples, rel_tol = 0.0)
end

function test_asymmetry(self::@like(IsCloseTests))
assertAllClose(self, [(9, 10), (10, 9)], rel_tol = 0.1)
end

function test_integers(self::@like(IsCloseTests))
integer_examples = [(100000001, 100000000), (123456789, 123456788)]
assertAllClose(self, integer_examples, rel_tol = 1e-08)
assertAllNotClose(self, integer_examples, rel_tol = 1e-09)
end

function test_decimals(self::@like(IsCloseTests))
decimal_examples = [(Decimal("1.00000001"), Decimal("1.0")), (Decimal("1.00000001e-20"), Decimal("1.0e-20")), (Decimal("1.00000001e-100"), Decimal("1.0e-100")), (Decimal("1.00000001e20"), Decimal("1.0e20"))]
assertAllClose(self, decimal_examples, rel_tol = 1e-08)
assertAllNotClose(self, decimal_examples, rel_tol = 1e-09)
end

function test_fractions(self::@like(IsCloseTests))
fraction_examples = [(Fraction(1, 100000000) + 1, Fraction(1)), (Fraction(100000001), Fraction(100000000)), (Fraction(10^8 + 1, 10^28), Fraction(1, 10^20))]
assertAllClose(self, fraction_examples, rel_tol = 1e-08)
assertAllNotClose(self, fraction_examples, rel_tol = 1e-09)
end


function test_main()
suite = unittest.TestSuite()
addTest(suite, unittest.makeSuite(MathTests))
addTest(suite, unittest.makeSuite(IsCloseTests))
addTest(suite, DocFileSuite("ieee754.txt"))
run_unittest(suite)
end

if abspath(PROGRAM_FILE) == @__FILE__
test_main()
test_numbers = TestNumbers()
test_int(test_numbers)
test_float(test_numbers)
test_complex(test_numbers)
aug_assign_test = AugAssignTest()
testBasic(aug_assign_test)
testInList(aug_assign_test)
testInDict(aug_assign_test)
testSequences(aug_assign_test)
testCustomMethods1(aug_assign_test)
testCustomMethods2(aug_assign_test)
legacy_base64_test_case = LegacyBase64TestCase()
test_encodebytes(legacy_base64_test_case)
test_decodebytes(legacy_base64_test_case)
test_encode(legacy_base64_test_case)
test_decode(legacy_base64_test_case)
base_x_y_test_case = BaseXYTestCase()
test_b64encode(base_x_y_test_case)
test_b64decode(base_x_y_test_case)
test_b64decode_padding_error(base_x_y_test_case)
test_b64decode_invalid_chars(base_x_y_test_case)
test_b32encode(base_x_y_test_case)
test_b32decode(base_x_y_test_case)
test_b32decode_casefold(base_x_y_test_case)
test_b32decode_error(base_x_y_test_case)
test_b32hexencode(base_x_y_test_case)
test_b32hexencode_other_types(base_x_y_test_case)
test_b32hexdecode(base_x_y_test_case)
test_b32hexdecode_other_types(base_x_y_test_case)
test_b32hexdecode_error(base_x_y_test_case)
test_b16encode(base_x_y_test_case)
test_b16decode(base_x_y_test_case)
test_a85encode(base_x_y_test_case)
test_b85encode(base_x_y_test_case)
test_a85decode(base_x_y_test_case)
test_b85decode(base_x_y_test_case)
test_a85_padding(base_x_y_test_case)
test_b85_padding(base_x_y_test_case)
test_a85decode_errors(base_x_y_test_case)
test_b85decode_errors(base_x_y_test_case)
test_decode_nonascii_str(base_x_y_test_case)
test_ErrorHeritage(base_x_y_test_case)
test_RFC4648_test_cases(base_x_y_test_case)
test_main = TestMain()
test_encode_decode(test_main)
test_encode_file(test_main)
test_encode_from_stdin(test_main)
test_decode(test_main)
tearDown(test_main)
rat_test_case = RatTestCase()
test_gcd(rat_test_case)
test_constructor(rat_test_case)
test_add(rat_test_case)
test_sub(rat_test_case)
test_mul(rat_test_case)
test_div(rat_test_case)
test_floordiv(rat_test_case)
test_eq(rat_test_case)
test_true_div(rat_test_case)
operation_order_tests = OperationOrderTests()
test_comparison_orders(operation_order_tests)
fallback_blocking_tests = FallbackBlockingTests()
test_fallback_rmethod_blocking(fallback_blocking_tests)
test_fallback_ne_blocking(fallback_blocking_tests)
bool_test = BoolTest()
test_repr(bool_test)
test_str(bool_test)
test_int(bool_test)
test_float(bool_test)
test_math(bool_test)
test_convert(bool_test)
test_keyword_args(bool_test)
test_format(bool_test)
test_hasattr(bool_test)
test_callable(bool_test)
test_isinstance(bool_test)
test_issubclass(bool_test)
test_contains(bool_test)
test_string(bool_test)
test_boolean(bool_test)
test_fileclosed(bool_test)
test_types(bool_test)
test_operator(bool_test)
test_marshal(bool_test)
test_pickle(bool_test)
test_picklevalues(bool_test)
test_convert_to_bool(bool_test)
test_from_bytes(bool_test)
test_sane_len(bool_test)
test_blocked(bool_test)
test_real_and_imag(bool_test)
test_bool_called_at_least_once(bool_test)
builtin_test = BuiltinTest()
test_import(builtin_test)
test_abs(builtin_test)
test_all(builtin_test)
test_any(builtin_test)
test_ascii(builtin_test)
test_neg(builtin_test)
test_callable(builtin_test)
test_chr(builtin_test)
test_cmp(builtin_test)
test_compile(builtin_test)
test_compile_top_level_await_no_coro(builtin_test)
test_compile_top_level_await(builtin_test)
test_compile_top_level_await_invalid_cases(builtin_test)
test_compile_async_generator(builtin_test)
test_delattr(builtin_test)
test_dir(builtin_test)
test_divmod(builtin_test)
test_eval(builtin_test)
test_general_eval(builtin_test)
test_exec(builtin_test)
test_exec_globals(builtin_test)
test_exec_redirected(builtin_test)
test_filter(builtin_test)
test_filter_pickle(builtin_test)
test_getattr(builtin_test)
test_hasattr(builtin_test)
test_hash(builtin_test)
test_hex(builtin_test)
test_id(builtin_test)
test_iter(builtin_test)
test_isinstance(builtin_test)
test_issubclass(builtin_test)
test_len(builtin_test)
test_map(builtin_test)
test_map_pickle(builtin_test)
test_max(builtin_test)
test_min(builtin_test)
test_next(builtin_test)
test_oct(builtin_test)
test_open(builtin_test)
test_open_default_encoding(builtin_test)
test_open_non_inheritable(builtin_test)
test_ord(builtin_test)
test_pow(builtin_test)
test_input(builtin_test)
test_repr(builtin_test)
test_round(builtin_test)
test_round_large(builtin_test)
test_bug_27936(builtin_test)
test_setattr(builtin_test)
test_sum(builtin_test)
test_type(builtin_test)
test_vars(builtin_test)
test_zip(builtin_test)
test_zip_pickle(builtin_test)
test_zip_pickle_strict(builtin_test)
test_zip_pickle_strict_fail(builtin_test)
test_zip_bad_iterable(builtin_test)
test_zip_strict(builtin_test)
test_zip_strict_iterators(builtin_test)
test_zip_strict_error_handling(builtin_test)
test_zip_strict_error_handling_stopiteration(builtin_test)
test_zip_result_gc(builtin_test)
test_format(builtin_test)
test_bin(builtin_test)
test_bytearray_translate(builtin_test)
test_bytearray_extend_error(builtin_test)
test_construct_singletons(builtin_test)
test_warning_notimplemented(builtin_test)
test_breakpoint = TestBreakpoint()
setUp(test_breakpoint)
test_breakpoint(test_breakpoint)
test_breakpoint_with_breakpointhook_set(test_breakpoint)
test_breakpoint_with_breakpointhook_reset(test_breakpoint)
test_breakpoint_with_args_and_keywords(test_breakpoint)
test_breakpoint_with_passthru_error(test_breakpoint)
test_envar_good_path_builtin(test_breakpoint)
test_envar_good_path_other(test_breakpoint)
test_envar_good_path_noop_0(test_breakpoint)
test_envar_good_path_empty_string(test_breakpoint)
test_envar_unimportable(test_breakpoint)
test_envar_ignored_when_hook_is_set(test_breakpoint)
pty_tests = PtyTests()
test_input_tty(pty_tests)
test_input_tty_non_ascii(pty_tests)
test_input_tty_non_ascii_unicode_errors(pty_tests)
test_input_no_stdout_fileno(pty_tests)
test_sorted = TestSorted()
test_basic(test_sorted)
test_bad_arguments(test_sorted)
test_inputtypes(test_sorted)
test_baddecorator(test_sorted)
shutdown_test = ShutdownTest()
test_cleanup(shutdown_test)
test_type = TestType()
test_new_type(test_type)
test_type_nokwargs(test_type)
test_type_name(test_type)
test_type_qualname(test_type)
test_type_doc(test_type)
test_bad_args(test_type)
test_bad_slots(test_type)
test_namespace_order(test_type)
bytes_test = BytesTest()
test_getitem_error(bytes_test)
test_buffer_is_readonly(bytes_test)
test_bytes_blocking(bytes_test)
test_repeat_id_preserving(bytes_test)
byte_array_test = ByteArrayTest()
test_getitem_error(byte_array_test)
test_setitem_error(byte_array_test)
test_nohash(byte_array_test)
test_bytearray_api(byte_array_test)
test_reverse(byte_array_test)
test_clear(byte_array_test)
test_copy(byte_array_test)
test_regexps(byte_array_test)
test_setitem(byte_array_test)
test_delitem(byte_array_test)
test_setslice(byte_array_test)
test_setslice_extend(byte_array_test)
test_fifo_overrun(byte_array_test)
test_del_expand(byte_array_test)
test_extended_set_del_slice(byte_array_test)
test_setslice_trap(byte_array_test)
test_iconcat(byte_array_test)
test_irepeat(byte_array_test)
test_irepeat_1char(byte_array_test)
test_alloc(byte_array_test)
test_init_alloc(byte_array_test)
test_extend(byte_array_test)
test_remove(byte_array_test)
test_pop(byte_array_test)
test_nosort(byte_array_test)
test_append(byte_array_test)
test_insert(byte_array_test)
test_copied(byte_array_test)
test_partition_bytearray_doesnt_share_nullstring(byte_array_test)
test_resize_forbidden(byte_array_test)
test_obsolete_write_lock(byte_array_test)
test_iterator_pickling2(byte_array_test)
test_iterator_length_hint(byte_array_test)
test_repeat_after_setslice(byte_array_test)
assorted_bytes_test = AssortedBytesTest()
test_repr_str(assorted_bytes_test)
test_format(assorted_bytes_test)
test_compare_bytes_to_bytearray(assorted_bytes_test)
test_doc(assorted_bytes_test)
test_from_bytearray(assorted_bytes_test)
test_to_str(assorted_bytes_test)
test_literal(assorted_bytes_test)
test_split_bytearray(assorted_bytes_test)
test_rsplit_bytearray(assorted_bytes_test)
test_return_self(assorted_bytes_test)
test_compare(assorted_bytes_test)
bytearray_p_e_p3137_test = BytearrayPEP3137Test()
test_returns_new_copy(bytearray_p_e_p3137_test)
byte_array_as_string_test = ByteArrayAsStringTest()
bytes_as_string_test = BytesAsStringTest()
byte_array_subclass_test = ByteArraySubclassTest()
test_init_override(byte_array_subclass_test)
bytes_subclass_test = BytesSubclassTest()
test_user_objects = TestUserObjects()
test_str_protocol(test_user_objects)
test_list_protocol(test_user_objects)
test_dict_protocol(test_user_objects)
test_list_copy(test_user_objects)
test_dict_copy(test_user_objects)
test_chain_map = TestChainMap()
test_basics(test_chain_map)
test_ordering(test_chain_map)
test_constructor(test_chain_map)
test_bool(test_chain_map)
test_missing(test_chain_map)
test_order_preservation(test_chain_map)
test_iter_not_calling_getitem_on_maps(test_chain_map)
test_dict_coercion(test_chain_map)
test_new_child(test_chain_map)
test_union_operators(test_chain_map)
test_named_tuple = TestNamedTuple()
test_factory(test_named_tuple)
test_defaults(test_named_tuple)
test_readonly(test_named_tuple)
test_factory_doc_attr(test_named_tuple)
test_field_doc(test_named_tuple)
test_field_doc_reuse(test_named_tuple)
test_field_repr(test_named_tuple)
test_name_fixer(test_named_tuple)
test_module_parameter(test_named_tuple)
test_instance(test_named_tuple)
test_tupleness(test_named_tuple)
test_odd_sizes(test_named_tuple)
test_pickle(test_named_tuple)
test_copy(test_named_tuple)
test_name_conflicts(test_named_tuple)
test_repr(test_named_tuple)
test_keyword_only_arguments(test_named_tuple)
test_namedtuple_subclass_issue_24931(test_named_tuple)
test_field_descriptor(test_named_tuple)
test_new_builtins_issue_43102(test_named_tuple)
test_match_args(test_named_tuple)
a_b_c_test_case = ABCTestCase()
test_counter = TestCounter()
test_basics(test_counter)
test_init(test_counter)
test_total(test_counter)
test_order_preservation(test_counter)
test_update(test_counter)
test_copying(test_counter)
test_copy_subclass(test_counter)
test_conversions(test_counter)
test_invariant_for_the_in_operator(test_counter)
test_multiset_operations(test_counter)
test_inplace_operations(test_counter)
test_subtract(test_counter)
test_unary(test_counter)
test_repr_nonsortable(test_counter)
test_helper_function(test_counter)
test_multiset_operations_equivalent_to_set_operations(test_counter)
test_eq(test_counter)
test_le(test_counter)
test_lt(test_counter)
test_ge(test_counter)
test_gt(test_counter)
comparison_test = ComparisonTest()
test_comparisons(comparison_test)
test_id_comparisons(comparison_test)
test_ne_defaults_to_not_eq(comparison_test)
test_ne_high_priority(comparison_test)
test_ne_low_priority(comparison_test)
test_other_delegation(comparison_test)
test_issue_1393(comparison_test)
complex_test = ComplexTest()
test_truediv(complex_test)
test_truediv_zero_division(complex_test)
test_floordiv(complex_test)
test_floordiv_zero_division(complex_test)
test_richcompare(complex_test)
test_richcompare_boundaries(complex_test)
test_mod(complex_test)
test_mod_zero_division(complex_test)
test_divmod(complex_test)
test_divmod_zero_division(complex_test)
test_pow(complex_test)
test_pow_with_small_integer_exponents(complex_test)
test_boolcontext(complex_test)
test_conjugate(complex_test)
test_constructor(complex_test)
test_constructor_special_numbers(complex_test)
test_underscores(complex_test)
test_hash(complex_test)
test_abs(complex_test)
test_repr_str(complex_test)
test_negative_zero_repr_str(complex_test)
test_neg(complex_test)
test_getnewargs(complex_test)
test_plus_minus_0j(complex_test)
test_negated_imaginary_literal(complex_test)
test_overflow(complex_test)
test_repr_roundtrip(complex_test)
test_format(complex_test)
test_contains = TestContains()
test_common_tests(test_contains)
test_builtin_sequence_types(test_contains)
test_nonreflexive(test_contains)
test_block_fallback(test_contains)
test_abstract_context_manager = TestAbstractContextManager()
test_enter(test_abstract_context_manager)
test_exit_is_abstract(test_abstract_context_manager)
test_structural_subclassing(test_abstract_context_manager)
context_manager_test_case = ContextManagerTestCase()
test_contextmanager_plain(context_manager_test_case)
test_contextmanager_finally(context_manager_test_case)
test_contextmanager_no_reraise(context_manager_test_case)
test_contextmanager_trap_yield_after_throw(context_manager_test_case)
test_contextmanager_except(context_manager_test_case)
test_contextmanager_except_stopiter(context_manager_test_case)
test_contextmanager_except_pep479(context_manager_test_case)
test_contextmanager_do_not_unchain_non_stopiteration_exceptions(context_manager_test_case)
test_contextmanager_attribs(context_manager_test_case)
test_contextmanager_doc_attrib(context_manager_test_case)
test_instance_docstring_given_cm_docstring(context_manager_test_case)
test_keywords(context_manager_test_case)
test_nokeepref(context_manager_test_case)
test_param_errors(context_manager_test_case)
test_recursive(context_manager_test_case)
closing_test_case = ClosingTestCase()
test_instance_docs(closing_test_case)
test_closing(closing_test_case)
test_closing_error(closing_test_case)
nullcontext_test_case = NullcontextTestCase()
test_nullcontext(nullcontext_test_case)
file_context_test_case = FileContextTestCase()
testWithOpen(file_context_test_case)
lock_context_test_case = LockContextTestCase()
testWithLock(lock_context_test_case)
testWithRLock(lock_context_test_case)
testWithCondition(lock_context_test_case)
testWithSemaphore(lock_context_test_case)
testWithBoundedSemaphore(lock_context_test_case)
test_context_decorator = TestContextDecorator()
test_instance_docs(test_context_decorator)
test_contextdecorator(test_context_decorator)
test_contextdecorator_with_exception(test_context_decorator)
test_decorator(test_context_decorator)
test_decorator_with_exception(test_context_decorator)
test_decorating_method(test_context_decorator)
test_typo_enter(test_context_decorator)
test_typo_exit(test_context_decorator)
test_contextdecorator_as_mixin(test_context_decorator)
test_contextmanager_as_decorator(test_context_decorator)
test_exit_stack = TestExitStack()
test_redirect_stdout = TestRedirectStdout()
test_redirect_stderr = TestRedirectStderr()
test_suppress = TestSuppress()
test_instance_docs(test_suppress)
test_no_result_from_enter(test_suppress)
test_no_exception(test_suppress)
test_exact_exception(test_suppress)
test_exception_hierarchy(test_suppress)
test_other_exception(test_suppress)
test_no_args(test_suppress)
test_multiple_exception_args(test_suppress)
test_cm_is_reentrant(test_suppress)
test_abstract_async_context_manager = TestAbstractAsyncContextManager()
test_exit_is_abstract(test_abstract_async_context_manager)
test_structural_subclassing(test_abstract_async_context_manager)
async_context_manager_test_case = AsyncContextManagerTestCase()
test_contextmanager_attribs(async_context_manager_test_case)
test_contextmanager_doc_attrib(async_context_manager_test_case)
aclosing_test_case = AclosingTestCase()
test_instance_docs(aclosing_test_case)
test_async_exit_stack = TestAsyncExitStack()
setUp(test_async_exit_stack)
test_async_nullcontext = TestAsyncNullcontext()
test_case = TestCase()
test_no_fields(test_case)
test_no_fields_but_member_variable(test_case)
test_one_field_no_default(test_case)
test_field_default_default_factory_error(test_case)
test_field_repr(test_case)
test_named_init_params(test_case)
test_two_fields_one_default(test_case)
test_overwrite_hash(test_case)
test_overwrite_fields_in_derived_class(test_case)
test_field_named_self(test_case)
test_field_named_object(test_case)
test_field_named_object_frozen(test_case)
test_field_named_like_builtin(test_case)
test_field_named_like_builtin_frozen(test_case)
test_0_field_compare(test_case)
test_1_field_compare(test_case)
test_simple_compare(test_case)
test_compare_subclasses(test_case)
test_eq_order(test_case)
test_field_no_default(test_case)
test_field_default(test_case)
test_not_in_repr(test_case)
test_not_in_compare(test_case)
test_hash_field_rules(test_case)
test_init_false_no_default(test_case)
test_class_marker(test_case)
test_field_order(test_case)
test_class_attrs(test_case)
test_disallowed_mutable_defaults(test_case)
test_deliberately_mutable_defaults(test_case)
test_no_options(test_case)
test_not_tuple(test_case)
test_not_other_dataclass(test_case)
test_function_annotations(test_case)
test_missing_default(test_case)
test_missing_default_factory(test_case)
test_missing_repr(test_case)
test_dont_include_other_annotations(test_case)
test_post_init(test_case)
test_post_init_super(test_case)
test_post_init_staticmethod(test_case)
test_post_init_classmethod(test_case)
test_class_var(test_case)
test_class_var_no_default(test_case)
test_class_var_default_factory(test_case)
test_class_var_with_default(test_case)
test_class_var_frozen(test_case)
test_init_var_no_default(test_case)
test_init_var_default_factory(test_case)
test_init_var_with_default(test_case)
test_init_var(test_case)
test_init_var_preserve_type(test_case)
test_init_var_inheritance(test_case)
test_default_factory(test_case)
test_default_factory_with_no_init(test_case)
test_default_factory_not_called_if_value_given(test_case)
test_default_factory_derived(test_case)
test_intermediate_non_dataclass(test_case)
test_classvar_default_factory(test_case)
test_is_dataclass(test_case)
test_is_dataclass_when_getattr_always_returns(test_case)
test_is_dataclass_genericalias(test_case)
test_helper_fields_with_class_instance(test_case)
test_helper_fields_exception(test_case)
test_helper_asdict(test_case)
test_helper_asdict_raises_on_classes(test_case)
test_helper_asdict_copy_values(test_case)
test_helper_asdict_nested(test_case)
test_helper_asdict_builtin_containers(test_case)
test_helper_asdict_builtin_object_containers(test_case)
test_helper_asdict_factory(test_case)
test_helper_asdict_namedtuple(test_case)
test_helper_asdict_namedtuple_key(test_case)
test_helper_asdict_namedtuple_derived(test_case)
test_helper_astuple(test_case)
test_helper_astuple_raises_on_classes(test_case)
test_helper_astuple_copy_values(test_case)
test_helper_astuple_nested(test_case)
test_helper_astuple_builtin_containers(test_case)
test_helper_astuple_builtin_object_containers(test_case)
test_helper_astuple_factory(test_case)
test_helper_astuple_namedtuple(test_case)
test_dynamic_class_creation(test_case)
test_dynamic_class_creation_using_field(test_case)
test_init_in_order(test_case)
test_items_in_dicts(test_case)
test_alternate_classmethod_constructor(test_case)
test_field_metadata_default(test_case)
test_field_metadata_mapping(test_case)
test_field_metadata_custom_mapping(test_case)
test_generic_dataclasses(test_case)
test_generic_extending(test_case)
test_generic_dynamic(test_case)
test_dataclasses_pickleable(test_case)
test_dataclasses_qualnames(test_case)
test_field_no_annotation = TestFieldNoAnnotation()
test_field_without_annotation(test_field_no_annotation)
test_field_without_annotation_but_annotation_in_base(test_field_no_annotation)
test_field_without_annotation_but_annotation_in_base_not_dataclass(test_field_no_annotation)
test_doc_string = TestDocString()
test_existing_docstring_not_overridden(test_doc_string)
test_docstring_no_fields(test_doc_string)
test_docstring_one_field(test_doc_string)
test_docstring_two_fields(test_doc_string)
test_docstring_three_fields(test_doc_string)
test_docstring_one_field_with_default(test_doc_string)
test_docstring_one_field_with_default_none(test_doc_string)
test_docstring_list_field(test_doc_string)
test_docstring_list_field_with_default_factory(test_doc_string)
test_docstring_deque_field(test_doc_string)
test_docstring_deque_field_with_default_factory(test_doc_string)
test_init = TestInit()
test_base_has_init(test_init)
test_no_init(test_init)
test_overwriting_init(test_init)
test_inherit_from_protocol(test_init)
test_repr = TestRepr()
test_repr(test_repr)
test_no_repr(test_repr)
test_overwriting_repr(test_repr)
test_eq = TestEq()
test_no_eq(test_eq)
test_overwriting_eq(test_eq)
test_ordering = TestOrdering()
test_functools_total_ordering(test_ordering)
test_no_order(test_ordering)
test_overwriting_order(test_ordering)
test_hash = TestHash()
test_unsafe_hash(test_hash)
test_hash_rules(test_hash)
test_eq_only(test_hash)
test_0_field_hash(test_hash)
test_1_field_hash(test_hash)
test_hash_no_args(test_hash)
test_frozen = TestFrozen()
test_frozen(test_frozen)
test_inherit(test_frozen)
test_inherit_nonfrozen_from_empty_frozen(test_frozen)
test_inherit_nonfrozen_from_empty(test_frozen)
test_inherit_nonfrozen_from_frozen(test_frozen)
test_inherit_frozen_from_nonfrozen(test_frozen)
test_inherit_from_normal_class(test_frozen)
test_non_frozen_normal_derived(test_frozen)
test_overwriting_frozen(test_frozen)
test_frozen_hash(test_frozen)
test_slots = TestSlots()
test_simple(test_slots)
test_derived_added_field(test_slots)
test_generated_slots(test_slots)
test_add_slots_when_slots_exists(test_slots)
test_generated_slots_value(test_slots)
test_returns_new_class(test_slots)
test_frozen_pickle(test_slots)
test_slots_with_default_no_init(test_slots)
test_slots_with_default_factory_no_init(test_slots)
test_descriptors = TestDescriptors()
test_set_name(test_descriptors)
test_non_descriptor(test_descriptors)
test_lookup_on_instance(test_descriptors)
test_lookup_on_class(test_descriptors)
test_string_annotations = TestStringAnnotations()
test_classvar(test_string_annotations)
test_isnt_classvar(test_string_annotations)
test_initvar(test_string_annotations)
test_isnt_initvar(test_string_annotations)
test_classvar_module_level_import(test_string_annotations)
test_text_annotations(test_string_annotations)
test_make_dataclass = TestMakeDataclass()
test_simple(test_make_dataclass)
test_no_mutate_namespace(test_make_dataclass)
test_base(test_make_dataclass)
test_base_dataclass(test_make_dataclass)
test_init_var(test_make_dataclass)
test_class_var(test_make_dataclass)
test_other_params(test_make_dataclass)
test_no_types(test_make_dataclass)
test_invalid_type_specification(test_make_dataclass)
test_duplicate_field_names(test_make_dataclass)
test_keyword_field_names(test_make_dataclass)
test_non_identifier_field_names(test_make_dataclass)
test_underscore_field_names(test_make_dataclass)
test_funny_class_names_names(test_make_dataclass)
test_replace = TestReplace()
test(test_replace)
test_frozen(test_replace)
test_invalid_field_name(test_replace)
test_invalid_object(test_replace)
test_no_init(test_replace)
test_classvar(test_replace)
test_initvar_is_specified(test_replace)
test_initvar_with_default_value(test_replace)
test_recursive_repr(test_replace)
test_recursive_repr_two_attrs(test_replace)
test_recursive_repr_indirection(test_replace)
test_recursive_repr_indirection_two(test_replace)
test_recursive_repr_misc_attrs(test_replace)
test_abstract = TestAbstract()
test_abc_implementation(test_abstract)
test_maintain_abc(test_abstract)
test_match_args = TestMatchArgs()
test_match_args(test_match_args)
test_explicit_match_args(test_match_args)
test_bpo_43764(test_match_args)
test_match_args_argument(test_match_args)
test_make_dataclasses(test_match_args)
test_keyword_args = TestKeywordArgs()
test_no_classvar_kwarg(test_keyword_args)
test_field_marked_as_kwonly(test_keyword_args)
test_match_args(test_keyword_args)
test_KW_ONLY(test_keyword_args)
test_KW_ONLY_as_string(test_keyword_args)
test_KW_ONLY_twice(test_keyword_args)
test_post_init(test_keyword_args)
test_defaults(test_keyword_args)
test_make_dataclass(test_keyword_args)
i_b_m_test_cases = IBMTestCases()
setUp(i_b_m_test_cases)
explicit_construction_test = ExplicitConstructionTest()
test_explicit_empty(explicit_construction_test)
test_explicit_from_None(explicit_construction_test)
test_explicit_from_int(explicit_construction_test)
test_explicit_from_string(explicit_construction_test)
test_from_legacy_strings(explicit_construction_test)
test_explicit_from_tuples(explicit_construction_test)
test_explicit_from_list(explicit_construction_test)
test_explicit_from_bool(explicit_construction_test)
test_explicit_from_Decimal(explicit_construction_test)
test_explicit_from_float(explicit_construction_test)
test_explicit_context_create_decimal(explicit_construction_test)
test_explicit_context_create_from_float(explicit_construction_test)
test_unicode_digits(explicit_construction_test)
implicit_construction_test = ImplicitConstructionTest()
test_implicit_from_None(implicit_construction_test)
test_implicit_from_int(implicit_construction_test)
test_implicit_from_string(implicit_construction_test)
test_implicit_from_float(implicit_construction_test)
test_implicit_from_Decimal(implicit_construction_test)
test_rop(implicit_construction_test)
format_test = FormatTest()
test_formatting(format_test)
test_n_format(format_test)
test_wide_char_separator_decimal_point(format_test)
test_decimal_from_float_argument_type(format_test)
arithmetic_operators_test = ArithmeticOperatorsTest()
test_addition(arithmetic_operators_test)
test_subtraction(arithmetic_operators_test)
test_multiplication(arithmetic_operators_test)
test_division(arithmetic_operators_test)
test_floor_division(arithmetic_operators_test)
test_powering(arithmetic_operators_test)
test_module(arithmetic_operators_test)
test_floor_div_module(arithmetic_operators_test)
test_unary_operators(arithmetic_operators_test)
test_nan_comparisons(arithmetic_operators_test)
test_copy_sign(arithmetic_operators_test)
threading_test = ThreadingTest()
test_threading(threading_test)
usability_test = UsabilityTest()
test_comparison_operators(usability_test)
test_decimal_float_comparison(usability_test)
test_decimal_complex_comparison(usability_test)
test_decimal_fraction_comparison(usability_test)
test_copy_and_deepcopy_methods(usability_test)
test_hash_method(usability_test)
test_hash_method_nan(usability_test)
test_min_and_max_methods(usability_test)
test_as_nonzero(usability_test)
test_tostring_methods(usability_test)
test_tonum_methods(usability_test)
test_nan_to_float(usability_test)
test_snan_to_float(usability_test)
test_eval_round_trip(usability_test)
test_as_tuple(usability_test)
test_as_integer_ratio(usability_test)
test_subclassing(usability_test)
test_implicit_context(usability_test)
test_none_args(usability_test)
test_conversions_from_int(usability_test)
python_a_p_itests = PythonAPItests()
test_abc(python_a_p_itests)
test_pickle(python_a_p_itests)
test_int(python_a_p_itests)
test_trunc(python_a_p_itests)
test_from_float(python_a_p_itests)
test_create_decimal_from_float(python_a_p_itests)
test_quantize(python_a_p_itests)
test_complex(python_a_p_itests)
test_named_parameters(python_a_p_itests)
test_exception_hierarchy(python_a_p_itests)
context_a_p_itests = ContextAPItests()
test_none_args(context_a_p_itests)
test_from_legacy_strings(context_a_p_itests)
test_pickle(context_a_p_itests)
test_equality_with_other_types(context_a_p_itests)
test_copy(context_a_p_itests)
test__clamp(context_a_p_itests)
test_abs(context_a_p_itests)
test_add(context_a_p_itests)
test_compare(context_a_p_itests)
test_compare_signal(context_a_p_itests)
test_compare_total(context_a_p_itests)
test_compare_total_mag(context_a_p_itests)
test_copy_abs(context_a_p_itests)
test_copy_decimal(context_a_p_itests)
test_copy_negate(context_a_p_itests)
test_copy_sign(context_a_p_itests)
test_divide(context_a_p_itests)
test_divide_int(context_a_p_itests)
test_divmod(context_a_p_itests)
test_exp(context_a_p_itests)
test_fma(context_a_p_itests)
test_is_finite(context_a_p_itests)
test_is_infinite(context_a_p_itests)
test_is_nan(context_a_p_itests)
test_is_normal(context_a_p_itests)
test_is_qnan(context_a_p_itests)
test_is_signed(context_a_p_itests)
test_is_snan(context_a_p_itests)
test_is_subnormal(context_a_p_itests)
test_is_zero(context_a_p_itests)
test_ln(context_a_p_itests)
test_log10(context_a_p_itests)
test_logb(context_a_p_itests)
test_logical_and(context_a_p_itests)
test_logical_invert(context_a_p_itests)
test_logical_or(context_a_p_itests)
test_logical_xor(context_a_p_itests)
test_max(context_a_p_itests)
test_max_mag(context_a_p_itests)
test_min(context_a_p_itests)
test_min_mag(context_a_p_itests)
test_minus(context_a_p_itests)
test_multiply(context_a_p_itests)
test_next_minus(context_a_p_itests)
test_next_plus(context_a_p_itests)
test_next_toward(context_a_p_itests)
test_normalize(context_a_p_itests)
test_number_class(context_a_p_itests)
test_plus(context_a_p_itests)
test_power(context_a_p_itests)
test_quantize(context_a_p_itests)
test_remainder(context_a_p_itests)
test_remainder_near(context_a_p_itests)
test_rotate(context_a_p_itests)
test_sqrt(context_a_p_itests)
test_same_quantum(context_a_p_itests)
test_scaleb(context_a_p_itests)
test_shift(context_a_p_itests)
test_subtract(context_a_p_itests)
test_to_eng_string(context_a_p_itests)
test_to_sci_string(context_a_p_itests)
test_to_integral_exact(context_a_p_itests)
test_to_integral_value(context_a_p_itests)
context_with_statement = ContextWithStatement()
test_localcontext(context_with_statement)
test_localcontextarg(context_with_statement)
test_nested_with_statements(context_with_statement)
test_with_statements_gc1(context_with_statement)
test_with_statements_gc2(context_with_statement)
test_with_statements_gc3(context_with_statement)
context_flags = ContextFlags()
test_flags_irrelevant(context_flags)
test_flag_comparisons(context_flags)
test_float_operation(context_flags)
test_float_comparison(context_flags)
test_float_operation_default(context_flags)
special_contexts = SpecialContexts()
test_context_templates(special_contexts)
test_default_context(special_contexts)
context_input_validation = ContextInputValidation()
test_invalid_context(context_input_validation)
context_subclassing = ContextSubclassing()
test_context_subclassing(context_subclassing)
check_attributes = CheckAttributes()
test_module_attributes(check_attributes)
test_context_attributes(check_attributes)
test_decimal_attributes(check_attributes)
coverage = Coverage()
test_adjusted(coverage)
test_canonical(coverage)
test_context_repr(coverage)
test_implicit_context(coverage)
test_divmod(coverage)
test_power(coverage)
test_quantize(coverage)
test_radix(coverage)
test_rop(coverage)
test_round(coverage)
test_create_decimal(coverage)
test_int(coverage)
test_copy(coverage)
py_functionality = PyFunctionality()
test_py_alternate_formatting(py_functionality)
py_whitebox = PyWhitebox()
test_py_exact_power(py_whitebox)
test_py_immutability_operations(py_whitebox)
test_py_decimal_id(py_whitebox)
test_py_rescale(py_whitebox)
test_py__round(py_whitebox)
c_functionality = CFunctionality()
test_c_ieee_context(c_functionality)
test_c_context(c_functionality)
test_constants(c_functionality)
c_whitebox = CWhitebox()
test_bignum(c_whitebox)
test_invalid_construction(c_whitebox)
test_c_input_restriction(c_whitebox)
test_c_context_repr(c_whitebox)
test_c_context_errors(c_whitebox)
test_rounding_strings_interned(c_whitebox)
test_c_context_errors_extra(c_whitebox)
test_c_valid_context(c_whitebox)
test_c_valid_context_extra(c_whitebox)
test_c_round(c_whitebox)
test_c_format(c_whitebox)
test_c_integral(c_whitebox)
test_c_funcs(c_whitebox)
test_va_args_exceptions(c_whitebox)
test_c_context_templates(c_whitebox)
test_c_signal_dict(c_whitebox)
test_invalid_override(c_whitebox)
test_exact_conversion(c_whitebox)
test_from_tuple(c_whitebox)
test_sizeof(c_whitebox)
test_internal_use_of_overridden_methods(c_whitebox)
test_maxcontext_exact_arith(c_whitebox)
signature_test = SignatureTest()
test_inspect_module(signature_test)
test_inspect_types(signature_test)
dict_test = DictTest()
test_invalid_keyword_arguments(dict_test)
test_constructor(dict_test)
test_literal_constructor(dict_test)
test_merge_operator(dict_test)
test_bool(dict_test)
test_keys(dict_test)
test_values(dict_test)
test_items(dict_test)
test_views_mapping(dict_test)
test_contains(dict_test)
test_len(dict_test)
test_getitem(dict_test)
test_clear(dict_test)
test_update(dict_test)
test_fromkeys(dict_test)
test_copy(dict_test)
test_copy_fuzz(dict_test)
test_copy_maintains_tracking(dict_test)
test_copy_noncompact(dict_test)
test_get(dict_test)
test_setdefault(dict_test)
test_setdefault_atomic(dict_test)
test_setitem_atomic_at_resize(dict_test)
test_popitem(dict_test)
test_pop(dict_test)
test_mutating_iteration(dict_test)
test_mutating_iteration_delete(dict_test)
test_mutating_iteration_delete_over_values(dict_test)
test_mutating_iteration_delete_over_items(dict_test)
test_mutating_lookup(dict_test)
test_repr(dict_test)
test_repr_deep(dict_test)
test_eq(dict_test)
test_keys_contained(dict_test)
test_errors_in_view_containment_check(dict_test)
test_dictview_set_operations_on_keys(dict_test)
test_dictview_set_operations_on_items(dict_test)
test_items_symmetric_difference(dict_test)
test_dictview_mixed_set_operations(dict_test)
test_missing(dict_test)
test_tuple_keyerror(dict_test)
test_bad_key(dict_test)
test_resize1(dict_test)
test_resize2(dict_test)
test_empty_presized_dict_in_freelist(dict_test)
test_container_iterator(dict_test)
test_track_literals(dict_test)
test_track_dynamic(dict_test)
test_track_subtypes(dict_test)
test_splittable_setdefault(dict_test)
test_splittable_del(dict_test)
test_splittable_pop(dict_test)
test_splittable_pop_pending(dict_test)
test_splittable_popitem(dict_test)
test_splittable_setattr_after_pop(dict_test)
test_iterator_pickling(dict_test)
test_itemiterator_pickling(dict_test)
test_valuesiterator_pickling(dict_test)
test_reverseiterator_pickling(dict_test)
test_reverseitemiterator_pickling(dict_test)
test_reversevaluesiterator_pickling(dict_test)
test_instance_dict_getattr_str_subclass(dict_test)
test_object_set_item_single_instance_non_str_key(dict_test)
test_reentrant_insertion(dict_test)
test_merge_and_mutate(dict_test)
test_free_after_iterating(dict_test)
test_equal_operator_modifying_operand(dict_test)
test_fromkeys_operator_modifying_dict_operand(dict_test)
test_fromkeys_operator_modifying_set_operand(dict_test)
test_dictitems_contains_use_after_free(dict_test)
test_dict_contain_use_after_free(dict_test)
test_init_use_after_free(dict_test)
test_oob_indexing_dictiter_iternextitem(dict_test)
test_reversed(dict_test)
test_reverse_iterator_for_empty_dict(dict_test)
test_reverse_iterator_for_shared_shared_dicts(dict_test)
test_dict_copy_order(dict_test)
test_dict_items_result_gc(dict_test)
test_dict_items_result_gc_reversed(dict_test)
test_str_nonstr(dict_test)
c_a_p_i_test = CAPITest()
test_getitem_knownhash(c_a_p_i_test)
dict_version_tests = DictVersionTests()
setUp(dict_version_tests)
test_constructor(dict_version_tests)
test_copy(dict_version_tests)
test_setitem(dict_version_tests)
test_setitem_same_value(dict_version_tests)
test_setitem_equal(dict_version_tests)
test_setdefault(dict_version_tests)
test_delitem(dict_version_tests)
test_pop(dict_version_tests)
test_popitem(dict_version_tests)
test_update(dict_version_tests)
test_clear(dict_version_tests)
dict_comprehension_test = DictComprehensionTest()
test_basics(dict_comprehension_test)
test_scope_isolation(dict_comprehension_test)
test_scope_isolation_from_global(dict_comprehension_test)
test_global_visibility(dict_comprehension_test)
test_local_visibility(dict_comprehension_test)
test_illegal_assignment(dict_comprehension_test)
test_evaluation_order(dict_comprehension_test)
test_assignment_idiom_in_comprehensions(dict_comprehension_test)
test_star_expression(dict_comprehension_test)
dict_set_test = DictSetTest()
test_constructors_not_callable(dict_set_test)
test_dict_keys(dict_set_test)
test_dict_items(dict_set_test)
test_dict_mixed_keys_items(dict_set_test)
test_dict_values(dict_set_test)
test_dict_repr(dict_set_test)
test_keys_set_operations(dict_set_test)
test_items_set_operations(dict_set_test)
test_set_operations_with_iterator(dict_set_test)
test_set_operations_with_noniterable(dict_set_test)
test_recursive_repr(dict_set_test)
test_deeply_nested_repr(dict_set_test)
test_copy(dict_set_test)
test_compare_error(dict_set_test)
test_pickle(dict_set_test)
test_abc_registry(dict_set_test)
e_o_f_test_case = EOFTestCase()
test_EOF_single_quote(e_o_f_test_case)
test_EOFS(e_o_f_test_case)
test_EOFS_with_file(e_o_f_test_case)
test_eof_with_line_continuation(e_o_f_test_case)
test_line_continuation_EOF(e_o_f_test_case)
test_line_continuation_EOF_from_file_bpo2180(e_o_f_test_case)
exception_tests = ExceptionTests()
testRaising(exception_tests)
testSyntaxErrorMessage(exception_tests)
testSyntaxErrorMissingParens(exception_tests)
test_error_offset_continuation_characters(exception_tests)
testSyntaxErrorOffset(exception_tests)
testSettingException(exception_tests)
test_WindowsError(exception_tests)
test_windows_message(exception_tests)
testAttributes(exception_tests)
testWithTraceback(exception_tests)
testInvalidTraceback(exception_tests)
testInvalidAttrs(exception_tests)
testNoneClearsTracebackAttr(exception_tests)
testChainingAttrs(exception_tests)
testChainingDescriptors(exception_tests)
testKeywordArgs(exception_tests)
testInfiniteRecursion(exception_tests)
test_str(exception_tests)
test_exception_cleanup_names(exception_tests)
test_exception_cleanup_names2(exception_tests)
testExceptionCleanupState(exception_tests)
test_exception_target_in_nested_scope(exception_tests)
test_generator_leaking(exception_tests)
test_generator_leaking2(exception_tests)
test_generator_leaking3(exception_tests)
test_generator_leaking4(exception_tests)
test_generator_doesnt_retain_old_exc(exception_tests)
test_generator_finalizing_and_exc_info(exception_tests)
test_generator_throw_cleanup_exc_state(exception_tests)
test_generator_close_cleanup_exc_state(exception_tests)
test_generator_del_cleanup_exc_state(exception_tests)
test_generator_next_cleanup_exc_state(exception_tests)
test_generator_send_cleanup_exc_state(exception_tests)
test_3114(exception_tests)
test_raise_does_not_create_context_chain_cycle(exception_tests)
test_no_hang_on_context_chain_cycle1(exception_tests)
test_no_hang_on_context_chain_cycle2(exception_tests)
test_no_hang_on_context_chain_cycle3(exception_tests)
test_unicode_change_attributes(exception_tests)
test_unicode_errors_no_object(exception_tests)
test_badisinstance(exception_tests)
test_trashcan_recursion(exception_tests)
test_recursion_normalizing_exception(exception_tests)
test_recursion_normalizing_infinite_exception(exception_tests)
test_recursion_in_except_handler(exception_tests)
test_recursion_normalizing_with_no_memory(exception_tests)
test_MemoryError(exception_tests)
test_exception_with_doc(exception_tests)
test_memory_error_cleanup(exception_tests)
test_recursion_error_cleanup(exception_tests)
test_errno_ENOTDIR(exception_tests)
test_unraisable(exception_tests)
test_unhandled(exception_tests)
test_memory_error_in_PyErr_PrintEx(exception_tests)
test_yield_in_nested_try_excepts(exception_tests)
test_generator_doesnt_retain_old_exc2(exception_tests)
test_raise_in_generator(exception_tests)
test_assert_shadowing(exception_tests)
test_memory_error_subclasses(exception_tests)
name_error_tests = NameErrorTests()
test_name_error_has_name(name_error_tests)
test_name_error_suggestions(name_error_tests)
test_name_error_suggestions_from_globals(name_error_tests)
test_name_error_suggestions_from_builtins(name_error_tests)
test_name_error_suggestions_do_not_trigger_for_long_names(name_error_tests)
test_name_error_bad_suggestions_do_not_trigger_for_small_names(name_error_tests)
test_name_error_suggestions_do_not_trigger_for_too_many_locals(name_error_tests)
test_name_error_with_custom_exceptions(name_error_tests)
test_unbound_local_error_doesn_not_match(name_error_tests)
test_issue45826(name_error_tests)
test_issue45826_focused(name_error_tests)
attribute_error_tests = AttributeErrorTests()
test_attributes(attribute_error_tests)
test_getattr_has_name_and_obj(attribute_error_tests)
test_getattr_has_name_and_obj_for_method(attribute_error_tests)
test_getattr_suggestions(attribute_error_tests)
test_getattr_suggestions_do_not_trigger_for_long_attributes(attribute_error_tests)
test_getattr_error_bad_suggestions_do_not_trigger_for_small_names(attribute_error_tests)
test_getattr_suggestions_do_not_trigger_for_big_dicts(attribute_error_tests)
test_getattr_suggestions_no_args(attribute_error_tests)
test_getattr_suggestions_invalid_args(attribute_error_tests)
test_getattr_suggestions_for_same_name(attribute_error_tests)
test_attribute_error_with_failing_dict(attribute_error_tests)
test_attribute_error_with_bad_name(attribute_error_tests)
test_attribute_error_inside_nested_getattr(attribute_error_tests)
import_error_tests = ImportErrorTests()
test_attributes(import_error_tests)
test_reset_attributes(import_error_tests)
test_non_str_argument(import_error_tests)
test_copy_pickle(import_error_tests)
syntax_error_tests = SyntaxErrorTests()
test_range_of_offsets(syntax_error_tests)
test_encodings(syntax_error_tests)
test_non_utf8(syntax_error_tests)
test_attributes_new_constructor(syntax_error_tests)
test_attributes_old_constructor(syntax_error_tests)
test_incorrect_constructor(syntax_error_tests)
p_e_p626_tests = PEP626Tests()
test_lineno_after_raise_simple(p_e_p626_tests)
test_lineno_after_raise_in_except(p_e_p626_tests)
test_lineno_after_other_except(p_e_p626_tests)
test_lineno_in_named_except(p_e_p626_tests)
test_lineno_in_try(p_e_p626_tests)
test_lineno_in_finally_normal(p_e_p626_tests)
test_lineno_in_finally_except(p_e_p626_tests)
test_lineno_after_with(p_e_p626_tests)
test_missing_lineno_shows_as_none(p_e_p626_tests)
test_lineno_after_raise_in_with_exit(p_e_p626_tests)
general_float_cases = GeneralFloatCases()
test_float(general_float_cases)
test_noargs(general_float_cases)
test_underscores(general_float_cases)
test_non_numeric_input_types(general_float_cases)
test_float_memoryview(general_float_cases)
test_error_message(general_float_cases)
test_float_with_comma(general_float_cases)
test_floatconversion(general_float_cases)
test_keyword_args(general_float_cases)
test_is_integer(general_float_cases)
test_floatasratio(general_float_cases)
test_float_containment(general_float_cases)
test_float_floor(general_float_cases)
test_float_ceil(general_float_cases)
test_float_mod(general_float_cases)
test_float_pow(general_float_cases)
test_hash(general_float_cases)
test_hash_nan(general_float_cases)
format_functions_test_case = FormatFunctionsTestCase()
setUp(format_functions_test_case)
test_getformat(format_functions_test_case)
test_setformat(format_functions_test_case)
tearDown(format_functions_test_case)
unknown_format_test_case = UnknownFormatTestCase()
setUp(unknown_format_test_case)
test_double_specials_dont_unpack(unknown_format_test_case)
test_float_specials_dont_unpack(unknown_format_test_case)
tearDown(unknown_format_test_case)
i_e_e_e_format_test_case = IEEEFormatTestCase()
test_double_specials_do_unpack(i_e_e_e_format_test_case)
test_float_specials_do_unpack(i_e_e_e_format_test_case)
test_serialized_float_rounding(i_e_e_e_format_test_case)
format_test_case = FormatTestCase()
test_format(format_test_case)
test_format_testfile(format_test_case)
test_issue5864(format_test_case)
test_issue35560(format_test_case)
repr_test_case = ReprTestCase()
test_repr(repr_test_case)
test_short_repr(repr_test_case)
round_test_case = RoundTestCase()
test_inf_nan(round_test_case)
test_large_n(round_test_case)
test_small_n(round_test_case)
test_overflow(round_test_case)
test_previous_round_bugs(round_test_case)
test_matches_float_format(round_test_case)
test_format_specials(round_test_case)
test_None_ndigits(round_test_case)
inf_nan_test = InfNanTest()
test_inf_from_str(inf_nan_test)
test_inf_as_str(inf_nan_test)
test_nan_from_str(inf_nan_test)
test_nan_as_str(inf_nan_test)
test_inf_signs(inf_nan_test)
test_nan_signs(inf_nan_test)
hex_float_test_case = HexFloatTestCase()
test_ends(hex_float_test_case)
test_invalid_inputs(hex_float_test_case)
test_whitespace(hex_float_test_case)
test_from_hex(hex_float_test_case)
test_roundtrip(hex_float_test_case)
test_subclass(hex_float_test_case)
format_test = FormatTest()
test_common_format(format_test)
test_str_format(format_test)
test_bytes_and_bytearray_format(format_test)
test_nul(format_test)
test_non_ascii(format_test)
test_locale(format_test)
test_optimisations(format_test)
test_precision(format_test)
test_precision_c_limits(format_test)
test_g_format_has_no_trailing_zeros(format_test)
test_with_two_commas_in_format_specifier(format_test)
test_with_two_underscore_in_format_specifier(format_test)
test_with_a_commas_and_an_underscore_in_format_specifier(format_test)
test_with_an_underscore_and_a_comma_in_format_specifier(format_test)
fraction_test = FractionTest()
testInit(fraction_test)
testInitFromFloat(fraction_test)
testInitFromDecimal(fraction_test)
testFromString(fraction_test)
testImmutable(fraction_test)
testFromFloat(fraction_test)
testFromDecimal(fraction_test)
test_as_integer_ratio(fraction_test)
testLimitDenominator(fraction_test)
testConversions(fraction_test)
testBoolGuarateesBoolReturn(fraction_test)
testRound(fraction_test)
testArithmetic(fraction_test)
testLargeArithmetic(fraction_test)
testMixedArithmetic(fraction_test)
testMixingWithDecimal(fraction_test)
testComparisons(fraction_test)
testComparisonsDummyRational(fraction_test)
testComparisonsDummyFloat(fraction_test)
testMixedLess(fraction_test)
testMixedLessEqual(fraction_test)
testBigFloatComparisons(fraction_test)
testBigComplexComparisons(fraction_test)
testMixedEqual(fraction_test)
testStringification(fraction_test)
testHash(fraction_test)
testApproximatePi(fraction_test)
testApproximateCos1(fraction_test)
test_copy_deepcopy_pickle(fraction_test)
test_slots(fraction_test)
test_int_subclass(fraction_test)
test_frozen = TestFrozen()
test_frozen(test_frozen)
test_case = TestCase()
test__format__lookup(test_case)
test_ast(test_case)
test_ast_line_numbers(test_case)
test_ast_line_numbers_multiple_formattedvalues(test_case)
test_ast_line_numbers_nested(test_case)
test_ast_line_numbers_duplicate_expression(test_case)
test_ast_numbers_fstring_with_formatting(test_case)
test_ast_line_numbers_multiline_fstring(test_case)
test_ast_line_numbers_with_parentheses(test_case)
test_docstring(test_case)
test_literal_eval(test_case)
test_ast_compile_time_concat(test_case)
test_compile_time_concat_errors(test_case)
test_literal(test_case)
test_unterminated_string(test_case)
test_mismatched_parens(test_case)
test_double_braces(test_case)
test_compile_time_concat(test_case)
test_comments(test_case)
test_many_expressions(test_case)
test_format_specifier_expressions(test_case)
test_side_effect_order(test_case)
test_missing_expression(test_case)
test_parens_in_expressions(test_case)
test_newlines_before_syntax_error(test_case)
test_backslashes_in_string_part(test_case)
test_misformed_unicode_character_name(test_case)
test_no_backslashes_in_expression_part(test_case)
test_no_escapes_for_braces(test_case)
test_newlines_in_expressions(test_case)
test_lambda(test_case)
test_yield(test_case)
test_yield_send(test_case)
test_expressions_with_triple_quoted_strings(test_case)
test_multiple_vars(test_case)
test_closure(test_case)
test_arguments(test_case)
test_locals(test_case)
test_missing_variable(test_case)
test_missing_format_spec(test_case)
test_global(test_case)
test_shadowed_global(test_case)
test_call(test_case)
test_nested_fstrings(test_case)
test_invalid_string_prefixes(test_case)
test_leading_trailing_spaces(test_case)
test_not_equal(test_case)
test_equal_equal(test_case)
test_conversions(test_case)
test_assignment(test_case)
test_del(test_case)
test_mismatched_braces(test_case)
test_if_conditional(test_case)
test_empty_format_specifier(test_case)
test_str_format_differences(test_case)
test_errors(test_case)
test_filename_in_syntaxerror(test_case)
test_loop(test_case)
test_dict(test_case)
test_backslash_char(test_case)
test_debug_conversion(test_case)
test_walrus(test_case)
test_invalid_syntax_error_message(test_case)
test_with_two_commas_in_format_specifier(test_case)
test_with_two_underscore_in_format_specifier(test_case)
test_with_a_commas_and_an_underscore_in_format_specifier(test_case)
test_with_an_underscore_and_a_comma_in_format_specifier(test_case)
test_syntax_error_for_starred_expressions(test_case)
test_p_e_p479 = TestPEP479()
test_stopiteration_wrapping(test_p_e_p479)
test_stopiteration_wrapping_context(test_p_e_p479)
signal_and_yield_from_test = SignalAndYieldFromTest()
test_raise_and_yield_from(signal_and_yield_from_test)
finalization_test = FinalizationTest()
test_frame_resurrect(finalization_test)
test_refcycle(finalization_test)
test_lambda_generator(finalization_test)
generator_test = GeneratorTest()
test_name(generator_test)
test_copy(generator_test)
test_pickle(generator_test)
test_send_non_none_to_new_gen(generator_test)
exception_test = ExceptionTest()
test_except_throw(exception_test)
test_except_next(exception_test)
test_except_gen_except(exception_test)
test_except_throw_exception_context(exception_test)
test_except_throw_bad_exception(exception_test)
test_stopiteration_error(exception_test)
test_tutorial_stopiteration(exception_test)
test_return_tuple(exception_test)
test_return_stopiteration(exception_test)
generator_throw_test = GeneratorThrowTest()
test_exception_context_with_yield(generator_throw_test)
test_exception_context_with_yield_inside_generator(generator_throw_test)
test_exception_context_with_yield_from(generator_throw_test)
test_exception_context_with_yield_from_with_context_cycle(generator_throw_test)
test_throw_after_none_exc_type(generator_throw_test)
generator_stack_trace_test = GeneratorStackTraceTest()
test_send_with_yield_from(generator_stack_trace_test)
test_throw_with_yield_from(generator_stack_trace_test)
yield_from_tests = YieldFromTests()
test_generator_gi_yieldfrom(yield_from_tests)
global_tests = GlobalTests()
setUp(global_tests)
test1(global_tests)
test2(global_tests)
test3(global_tests)
test4(global_tests)
tearDown(global_tests)
int_test_cases = IntTestCases()
test_basic(int_test_cases)
test_underscores(int_test_cases)
test_small_ints(int_test_cases)
test_no_args(int_test_cases)
test_keyword_args(int_test_cases)
test_int_base_limits(int_test_cases)
test_int_base_bad_types(int_test_cases)
test_int_base_indexable(int_test_cases)
test_non_numeric_input_types(int_test_cases)
test_int_memoryview(int_test_cases)
test_string_float(int_test_cases)
test_intconversion(int_test_cases)
test_int_subclass_with_index(int_test_cases)
test_int_subclass_with_int(int_test_cases)
test_int_returns_int_subclass(int_test_cases)
test_error_message(int_test_cases)
test_issue31619(int_test_cases)
test_hex_oct_bin = TestHexOctBin()
test_hex_baseline(test_hex_oct_bin)
test_hex_unsigned(test_hex_oct_bin)
test_oct_baseline(test_hex_oct_bin)
test_oct_unsigned(test_hex_oct_bin)
test_bin_baseline(test_hex_oct_bin)
test_bin_unsigned(test_hex_oct_bin)
test_is_instance_exceptions = TestIsInstanceExceptions()
test_class_has_no_bases(test_is_instance_exceptions)
test_bases_raises_other_than_attribute_error(test_is_instance_exceptions)
test_dont_mask_non_attribute_error(test_is_instance_exceptions)
test_mask_attribute_error(test_is_instance_exceptions)
test_isinstance_dont_mask_non_attribute_error(test_is_instance_exceptions)
test_is_subclass_exceptions = TestIsSubclassExceptions()
test_dont_mask_non_attribute_error(test_is_subclass_exceptions)
test_mask_attribute_error(test_is_subclass_exceptions)
test_dont_mask_non_attribute_error_in_cls_arg(test_is_subclass_exceptions)
test_mask_attribute_error_in_cls_arg(test_is_subclass_exceptions)
test_is_instance_is_subclass = TestIsInstanceIsSubclass()
test_isinstance_normal(test_is_instance_is_subclass)
test_isinstance_abstract(test_is_instance_is_subclass)
test_subclass_normal(test_is_instance_is_subclass)
test_subclass_abstract(test_is_instance_is_subclass)
test_subclass_tuple(test_is_instance_is_subclass)
test_subclass_recursion_limit(test_is_instance_is_subclass)
test_isinstance_recursion_limit(test_is_instance_is_subclass)
test_issubclass_refcount_handling(test_is_instance_is_subclass)
test_infinite_recursion_in_bases(test_is_instance_is_subclass)
test_infinite_recursion_via_bases_tuple(test_is_instance_is_subclass)
test_infinite_cycle_in_bases(test_is_instance_is_subclass)
test_infinitely_many_bases(test_is_instance_is_subclass)
test_case = TestCase()
test_iter_basic(test_case)
test_iter_idempotency(test_case)
test_iter_for_loop(test_case)
test_iter_independence(test_case)
test_nested_comprehensions_iter(test_case)
test_nested_comprehensions_for(test_case)
test_iter_class_for(test_case)
test_iter_class_iter(test_case)
test_seq_class_for(test_case)
test_seq_class_iter(test_case)
test_mutating_seq_class_iter_pickle(test_case)
test_mutating_seq_class_exhausted_iter(test_case)
test_new_style_iter_class(test_case)
test_iter_callable(test_case)
test_iter_function(test_case)
test_iter_function_stop(test_case)
test_exception_function(test_case)
test_exception_sequence(test_case)
test_stop_sequence(test_case)
test_iter_big_range(test_case)
test_iter_empty(test_case)
test_iter_tuple(test_case)
test_iter_range(test_case)
test_iter_string(test_case)
test_iter_dict(test_case)
test_iter_file(test_case)
test_builtin_list(test_case)
test_builtin_tuple(test_case)
test_builtin_filter(test_case)
test_builtin_max_min(test_case)
test_builtin_map(test_case)
test_builtin_zip(test_case)
test_unicode_join_endcase(test_case)
test_in_and_not_in(test_case)
test_countOf(test_case)
test_indexOf(test_case)
test_writelines(test_case)
test_unpack_iter(test_case)
test_ref_counting_behavior(test_case)
test_sinkstate_list(test_case)
test_sinkstate_tuple(test_case)
test_sinkstate_string(test_case)
test_sinkstate_sequence(test_case)
test_sinkstate_callable(test_case)
test_sinkstate_dict(test_case)
test_sinkstate_yield(test_case)
test_sinkstate_range(test_case)
test_sinkstate_enumerate(test_case)
test_3720(test_case)
test_extending_list_with_iterator_does_not_segfault(test_case)
test_iter_overflow(test_case)
test_iter_neg_setstate(test_case)
test_free_after_iterating(test_case)
test_error_iter(test_case)
test_repeat = TestRepeat()
setUp(test_repeat)
test_xrange = TestXrange()
setUp(test_xrange)
test_xrange_custom_reversed = TestXrangeCustomReversed()
setUp(test_xrange_custom_reversed)
test_tuple = TestTuple()
setUp(test_tuple)
test_deque = TestDeque()
setUp(test_deque)
test_deque_reversed = TestDequeReversed()
setUp(test_deque_reversed)
test_dict_keys = TestDictKeys()
setUp(test_dict_keys)
test_dict_items = TestDictItems()
setUp(test_dict_items)
test_dict_values = TestDictValues()
setUp(test_dict_values)
test_set = TestSet()
setUp(test_set)
test_list = TestList()
setUp(test_list)
test_mutation(test_list)
test_list_reversed = TestListReversed()
setUp(test_list_reversed)
test_mutation(test_list_reversed)
test_length_hint_exceptions = TestLengthHintExceptions()
test_issue1242657(test_length_hint_exceptions)
test_invalid_hint(test_length_hint_exceptions)
keyword_only_arg_test_case = KeywordOnlyArgTestCase()
testSyntaxErrorForFunctionDefinition(keyword_only_arg_test_case)
testSyntaxForManyArguments(keyword_only_arg_test_case)
testTooManyPositionalErrorMessage(keyword_only_arg_test_case)
testSyntaxErrorForFunctionCall(keyword_only_arg_test_case)
testRaiseErrorFuncallWithUnexpectedKeywordArgument(keyword_only_arg_test_case)
testFunctionCall(keyword_only_arg_test_case)
testKwDefaults(keyword_only_arg_test_case)
test_kwonly_methods(keyword_only_arg_test_case)
test_issue13343(keyword_only_arg_test_case)
test_mangling(keyword_only_arg_test_case)
test_default_evaluation_order(keyword_only_arg_test_case)
long_test = LongTest()
test_division(long_test)
test_karatsuba(long_test)
test_bitop_identities(long_test)
test_format(long_test)
test_long(long_test)
test_conversion(long_test)
test_float_conversion(long_test)
test_float_overflow(long_test)
test_logs(long_test)
test_mixed_compares(long_test)
test__format__(long_test)
test_nan_inf(long_test)
test_mod_division(long_test)
test_true_division(long_test)
test_floordiv(long_test)
test_correctly_rounded_true_division(long_test)
test_negative_shift_count(long_test)
test_lshift_of_zero(long_test)
test_huge_lshift_of_zero(long_test)
test_huge_lshift(long_test)
test_huge_rshift(long_test)
test_huge_rshift_of_huge(long_test)
test_small_ints_in_huge_calculation(long_test)
test_small_ints(long_test)
test_bit_length(long_test)
test_bit_count(long_test)
test_round(long_test)
test_to_bytes(long_test)
test_from_bytes(long_test)
test_access_to_nonexistent_digit_0(long_test)
test_shift_bool(long_test)
test_as_integer_ratio(long_test)
long_exp_text = LongExpText()
test_longexp(long_exp_text)
math_tests = MathTests()
testConstants(math_tests)
testAcos(math_tests)
testAcosh(math_tests)
testAsin(math_tests)
testAsinh(math_tests)
testAtan(math_tests)
testAtanh(math_tests)
testAtan2(math_tests)
testCeil(math_tests)
testCopysign(math_tests)
testCos(math_tests)
testCosh(math_tests)
testDegrees(math_tests)
testExp(math_tests)
testFabs(math_tests)
testFactorial(math_tests)
testFactorialNonIntegers(math_tests)
testFactorialHugeInputs(math_tests)
testFloor(math_tests)
testFmod(math_tests)
testFrexp(math_tests)
testFsum(math_tests)
testGcd(math_tests)
testHypot(math_tests)
testHypotAccuracy(math_tests)
testDist(math_tests)
testIsqrt(math_tests)
test_lcm(math_tests)
testLdexp(math_tests)
testLog(math_tests)
testLog1p(math_tests)
testLog2(math_tests)
testLog2Exact(math_tests)
testLog10(math_tests)
testModf(math_tests)
testPow(math_tests)
testRadians(math_tests)
testRemainder(math_tests)
testSin(math_tests)
testSinh(math_tests)
testSqrt(math_tests)
testTan(math_tests)
testTanh(math_tests)
testTanhSign(math_tests)
test_trunc(math_tests)
testIsfinite(math_tests)
testIsnan(math_tests)
testIsinf(math_tests)
test_nan_constant(math_tests)
test_inf_constant(math_tests)
test_exceptions(math_tests)
test_testfile(math_tests)
test_mtestfile(math_tests)
test_prod(math_tests)
testPerm(math_tests)
testComb(math_tests)
test_nextafter(math_tests)
test_ulp(math_tests)
test_issue39871(math_tests)
is_close_tests = IsCloseTests()
test_negative_tolerances(is_close_tests)
test_identical(is_close_tests)
test_eight_decimal_places(is_close_tests)
test_near_zero(is_close_tests)
test_identical_infinite(is_close_tests)
test_inf_ninf_nan(is_close_tests)
test_zero_tolerance(is_close_tests)
test_asymmetry(is_close_tests)
test_integers(is_close_tests)
test_decimals(is_close_tests)
test_fractions(is_close_tests)
end